// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/logs/v1/logs.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
class LogRecord;
struct LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class LogsData;
struct LogsDataDefaultTypeInternal;
extern LogsDataDefaultTypeInternal _LogsData_default_instance_;
class ResourceLogs;
struct ResourceLogsDefaultTypeInternal;
extern ResourceLogsDefaultTypeInternal _ResourceLogs_default_instance_;
class ScopeLogs;
struct ScopeLogsDefaultTypeInternal;
extern ScopeLogsDefaultTypeInternal _ScopeLogs_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
enum SeverityNumber : int {
  SEVERITY_NUMBER_UNSPECIFIED = 0,
  SEVERITY_NUMBER_TRACE = 1,
  SEVERITY_NUMBER_TRACE2 = 2,
  SEVERITY_NUMBER_TRACE3 = 3,
  SEVERITY_NUMBER_TRACE4 = 4,
  SEVERITY_NUMBER_DEBUG = 5,
  SEVERITY_NUMBER_DEBUG2 = 6,
  SEVERITY_NUMBER_DEBUG3 = 7,
  SEVERITY_NUMBER_DEBUG4 = 8,
  SEVERITY_NUMBER_INFO = 9,
  SEVERITY_NUMBER_INFO2 = 10,
  SEVERITY_NUMBER_INFO3 = 11,
  SEVERITY_NUMBER_INFO4 = 12,
  SEVERITY_NUMBER_WARN = 13,
  SEVERITY_NUMBER_WARN2 = 14,
  SEVERITY_NUMBER_WARN3 = 15,
  SEVERITY_NUMBER_WARN4 = 16,
  SEVERITY_NUMBER_ERROR = 17,
  SEVERITY_NUMBER_ERROR2 = 18,
  SEVERITY_NUMBER_ERROR3 = 19,
  SEVERITY_NUMBER_ERROR4 = 20,
  SEVERITY_NUMBER_FATAL = 21,
  SEVERITY_NUMBER_FATAL2 = 22,
  SEVERITY_NUMBER_FATAL3 = 23,
  SEVERITY_NUMBER_FATAL4 = 24,
  SeverityNumber_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SeverityNumber_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SeverityNumber_IsValid(int value);
extern const uint32_t SeverityNumber_internal_data_[];
constexpr SeverityNumber SeverityNumber_MIN = static_cast<SeverityNumber>(0);
constexpr SeverityNumber SeverityNumber_MAX = static_cast<SeverityNumber>(24);
constexpr int SeverityNumber_ARRAYSIZE = 24 + 1;
const ::google::protobuf::EnumDescriptor*
SeverityNumber_descriptor();
template <typename T>
const std::string& SeverityNumber_Name(T value) {
  static_assert(std::is_same<T, SeverityNumber>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SeverityNumber_Name().");
  return SeverityNumber_Name(static_cast<SeverityNumber>(value));
}
template <>
inline const std::string& SeverityNumber_Name(SeverityNumber value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SeverityNumber_descriptor,
                                                 0, 24>(
      static_cast<int>(value));
}
inline bool SeverityNumber_Parse(absl::string_view name, SeverityNumber* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeverityNumber>(
      SeverityNumber_descriptor(), name, value);
}
enum LogRecordFlags : int {
  LOG_RECORD_FLAGS_DO_NOT_USE = 0,
  LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255,
  LogRecordFlags_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogRecordFlags_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogRecordFlags_IsValid(int value);
extern const uint32_t LogRecordFlags_internal_data_[];
constexpr LogRecordFlags LogRecordFlags_MIN = static_cast<LogRecordFlags>(0);
constexpr LogRecordFlags LogRecordFlags_MAX = static_cast<LogRecordFlags>(255);
constexpr int LogRecordFlags_ARRAYSIZE = 255 + 1;
const ::google::protobuf::EnumDescriptor*
LogRecordFlags_descriptor();
template <typename T>
const std::string& LogRecordFlags_Name(T value) {
  static_assert(std::is_same<T, LogRecordFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogRecordFlags_Name().");
  return ::google::protobuf::internal::NameOfEnum(LogRecordFlags_descriptor(), value);
}
inline bool LogRecordFlags_Parse(absl::string_view name, LogRecordFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRecordFlags>(
      LogRecordFlags_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LogRecord final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.LogRecord) */ {
 public:
  inline LogRecord() : LogRecord(nullptr) {}
  ~LogRecord() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogRecord(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogRecord(const LogRecord& from) : LogRecord(nullptr, from) {}
  inline LogRecord(LogRecord&& from) noexcept
      : LogRecord(nullptr, std::move(from)) {}
  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
        &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LogRecord& a, LogRecord& b) { a.Swap(&b); }
  inline void Swap(LogRecord* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRecord* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogRecord& from) { LogRecord::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogRecord* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.logs.v1.LogRecord"; }

 protected:
  explicit LogRecord(::google::protobuf::Arena* arena);
  LogRecord(::google::protobuf::Arena* arena, const LogRecord& from);
  LogRecord(::google::protobuf::Arena* arena, LogRecord&& from) noexcept
      : LogRecord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 6,
    kSeverityTextFieldNumber = 3,
    kTraceIdFieldNumber = 9,
    kSpanIdFieldNumber = 10,
    kBodyFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 1,
    kSeverityNumberFieldNumber = 2,
    kDroppedAttributesCountFieldNumber = 7,
    kObservedTimeUnixNanoFieldNumber = 11,
    kFlagsFieldNumber = 8,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // string severity_text = 3;
  void clear_severity_text() ;
  const std::string& severity_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_severity_text(Arg_&& arg, Args_... args);
  std::string* mutable_severity_text();
  PROTOBUF_NODISCARD std::string* release_severity_text();
  void set_allocated_severity_text(std::string* value);

  private:
  const std::string& _internal_severity_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_severity_text(
      const std::string& value);
  std::string* _internal_mutable_severity_text();

  public:
  // bytes trace_id = 9;
  void clear_trace_id() ;
  const std::string& trace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* value);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // bytes span_id = 10;
  void clear_span_id() ;
  const std::string& span_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* value);

  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(
      const std::string& value);
  std::string* _internal_mutable_span_id();

  public:
  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  bool has_body() const;
  void clear_body() ;
  const ::opentelemetry::proto::common::v1::AnyValue& body() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::AnyValue* release_body();
  ::opentelemetry::proto::common::v1::AnyValue* mutable_body();
  void set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* value);
  void unsafe_arena_set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* value);
  ::opentelemetry::proto::common::v1::AnyValue* unsafe_arena_release_body();

  private:
  const ::opentelemetry::proto::common::v1::AnyValue& _internal_body() const;
  ::opentelemetry::proto::common::v1::AnyValue* _internal_mutable_body();

  public:
  // fixed64 time_unix_nano = 1;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  void clear_severity_number() ;
  ::opentelemetry::proto::logs::v1::SeverityNumber severity_number() const;
  void set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value);

  private:
  ::opentelemetry::proto::logs::v1::SeverityNumber _internal_severity_number() const;
  void _internal_set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value);

  public:
  // uint32 dropped_attributes_count = 7;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // fixed64 observed_time_unix_nano = 11;
  void clear_observed_time_unix_nano() ;
  ::uint64_t observed_time_unix_nano() const;
  void set_observed_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_observed_time_unix_nano() const;
  void _internal_set_observed_time_unix_nano(::uint64_t value);

  public:
  // fixed32 flags = 8;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.LogRecord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      67, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::google::protobuf::internal::ArenaStringPtr severity_text_;
    ::google::protobuf::internal::ArenaStringPtr trace_id_;
    ::google::protobuf::internal::ArenaStringPtr span_id_;
    ::opentelemetry::proto::common::v1::AnyValue* body_;
    ::uint64_t time_unix_nano_;
    int severity_number_;
    ::uint32_t dropped_attributes_count_;
    ::uint64_t observed_time_unix_nano_;
    ::uint32_t flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class ScopeLogs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.ScopeLogs) */ {
 public:
  inline ScopeLogs() : ScopeLogs(nullptr) {}
  ~ScopeLogs() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScopeLogs(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScopeLogs(const ScopeLogs& from) : ScopeLogs(nullptr, from) {}
  inline ScopeLogs(ScopeLogs&& from) noexcept
      : ScopeLogs(nullptr, std::move(from)) {}
  inline ScopeLogs& operator=(const ScopeLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeLogs& operator=(ScopeLogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeLogs* internal_default_instance() {
    return reinterpret_cast<const ScopeLogs*>(
        &_ScopeLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ScopeLogs& a, ScopeLogs& b) { a.Swap(&b); }
  inline void Swap(ScopeLogs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeLogs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeLogs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScopeLogs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScopeLogs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScopeLogs& from) { ScopeLogs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScopeLogs* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.logs.v1.ScopeLogs"; }

 protected:
  explicit ScopeLogs(::google::protobuf::Arena* arena);
  ScopeLogs(::google::protobuf::Arena* arena, const ScopeLogs& from);
  ScopeLogs(::google::protobuf::Arena* arena, ScopeLogs&& from) noexcept
      : ScopeLogs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogRecordsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
  int log_records_size() const;
  private:
  int _internal_log_records_size() const;

  public:
  void clear_log_records() ;
  ::opentelemetry::proto::logs::v1::LogRecord* mutable_log_records(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>* mutable_log_records();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>& _internal_log_records() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>* _internal_mutable_log_records();
  public:
  const ::opentelemetry::proto::logs::v1::LogRecord& log_records(int index) const;
  ::opentelemetry::proto::logs::v1::LogRecord* add_log_records();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>& log_records() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  void unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.ScopeLogs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::logs::v1::LogRecord > log_records_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class ResourceLogs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.ResourceLogs) */ {
 public:
  inline ResourceLogs() : ResourceLogs(nullptr) {}
  ~ResourceLogs() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceLogs(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceLogs(const ResourceLogs& from) : ResourceLogs(nullptr, from) {}
  inline ResourceLogs(ResourceLogs&& from) noexcept
      : ResourceLogs(nullptr, std::move(from)) {}
  inline ResourceLogs& operator=(const ResourceLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLogs& operator=(ResourceLogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceLogs* internal_default_instance() {
    return reinterpret_cast<const ResourceLogs*>(
        &_ResourceLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceLogs& a, ResourceLogs& b) { a.Swap(&b); }
  inline void Swap(ResourceLogs* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLogs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceLogs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResourceLogs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceLogs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceLogs& from) { ResourceLogs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceLogs* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.logs.v1.ResourceLogs"; }

 protected:
  explicit ResourceLogs(::google::protobuf::Arena* arena);
  ResourceLogs(::google::protobuf::Arena* arena, const ResourceLogs& from);
  ResourceLogs(::google::protobuf::Arena* arena, ResourceLogs&& from) noexcept
      : ResourceLogs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScopeLogsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
  int scope_logs_size() const;
  private:
  int _internal_scope_logs_size() const;

  public:
  void clear_scope_logs() ;
  ::opentelemetry::proto::logs::v1::ScopeLogs* mutable_scope_logs(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>* mutable_scope_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>& _internal_scope_logs() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>* _internal_mutable_scope_logs();
  public:
  const ::opentelemetry::proto::logs::v1::ScopeLogs& scope_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ScopeLogs* add_scope_logs();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>& scope_logs() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  void unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.ResourceLogs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ScopeLogs > scope_logs_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};
// -------------------------------------------------------------------

class LogsData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.logs.v1.LogsData) */ {
 public:
  inline LogsData() : LogsData(nullptr) {}
  ~LogsData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogsData(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogsData(const LogsData& from) : LogsData(nullptr, from) {}
  inline LogsData(LogsData&& from) noexcept
      : LogsData(nullptr, std::move(from)) {}
  inline LogsData& operator=(const LogsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogsData& operator=(LogsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogsData* internal_default_instance() {
    return reinterpret_cast<const LogsData*>(
        &_LogsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LogsData& a, LogsData& b) { a.Swap(&b); }
  inline void Swap(LogsData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogsData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogsData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogsData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogsData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogsData& from) { LogsData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogsData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.logs.v1.LogsData"; }

 protected:
  explicit LogsData(::google::protobuf::Arena* arena);
  LogsData(::google::protobuf::Arena* arena, const LogsData& from);
  LogsData(::google::protobuf::Arena* arena, LogsData&& from) noexcept
      : LogsData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourceLogsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  int resource_logs_size() const;
  private:
  int _internal_resource_logs_size() const;

  public:
  void clear_resource_logs() ;
  ::opentelemetry::proto::logs::v1::ResourceLogs* mutable_resource_logs(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>* mutable_resource_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>& _internal_resource_logs() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>* _internal_mutable_resource_logs();
  public:
  const ::opentelemetry::proto::logs::v1::ResourceLogs& resource_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ResourceLogs* add_resource_logs();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>& resource_logs() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.logs.v1.LogsData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs > resource_logs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogsData

// repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
inline int LogsData::_internal_resource_logs_size() const {
  return _internal_resource_logs().size();
}
inline int LogsData::resource_logs_size() const {
  return _internal_resource_logs_size();
}
inline void LogsData::clear_resource_logs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_logs_.Clear();
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* LogsData::mutable_resource_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _internal_mutable_resource_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>* LogsData::mutable_resource_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_logs();
}
inline const ::opentelemetry::proto::logs::v1::ResourceLogs& LogsData::resource_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _internal_resource_logs().Get(index);
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* LogsData::add_resource_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::logs::v1::ResourceLogs* _add = _internal_mutable_resource_logs()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>& LogsData::resource_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.LogsData.resource_logs)
  return _internal_resource_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>&
LogsData::_internal_resource_logs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ResourceLogs>*
LogsData::_internal_mutable_resource_logs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_logs_;
}

// -------------------------------------------------------------------

// ResourceLogs

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceLogs::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceLogs::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceLogs::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.resource)
  return _internal_resource();
}
inline void ResourceLogs::unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ResourceLogs.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceLogs::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.resource)
  return _msg;
}
inline void ResourceLogs::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.resource)
}

// repeated .opentelemetry.proto.logs.v1.ScopeLogs scope_logs = 2;
inline int ResourceLogs::_internal_scope_logs_size() const {
  return _internal_scope_logs().size();
}
inline int ResourceLogs::scope_logs_size() const {
  return _internal_scope_logs_size();
}
inline void ResourceLogs::clear_scope_logs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scope_logs_.Clear();
}
inline ::opentelemetry::proto::logs::v1::ScopeLogs* ResourceLogs::mutable_scope_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _internal_mutable_scope_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>* ResourceLogs::mutable_scope_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scope_logs();
}
inline const ::opentelemetry::proto::logs::v1::ScopeLogs& ResourceLogs::scope_logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _internal_scope_logs().Get(index);
}
inline ::opentelemetry::proto::logs::v1::ScopeLogs* ResourceLogs::add_scope_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::logs::v1::ScopeLogs* _add = _internal_mutable_scope_logs()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>& ResourceLogs::scope_logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.ResourceLogs.scope_logs)
  return _internal_scope_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>&
ResourceLogs::_internal_scope_logs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scope_logs_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::ScopeLogs>*
ResourceLogs::_internal_mutable_scope_logs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scope_logs_;
}

// string schema_url = 3;
inline void ResourceLogs::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceLogs::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceLogs::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
}
inline std::string* ResourceLogs::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _s;
}
inline const std::string& ResourceLogs::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ResourceLogs::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ResourceLogs::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ResourceLogs::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceLogs::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ResourceLogs.schema_url)
}

// -------------------------------------------------------------------

// ScopeLogs

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeLogs::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeLogs::_internal_scope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeLogs::scope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.scope)
  return _internal_scope();
}
inline void ScopeLogs::unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* released = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::unsafe_arena_release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ScopeLogs.scope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::_internal_mutable_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArena());
    _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(p);
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeLogs::mutable_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.scope)
  return _msg;
}
inline void ScopeLogs::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.scope)
}

// repeated .opentelemetry.proto.logs.v1.LogRecord log_records = 2;
inline int ScopeLogs::_internal_log_records_size() const {
  return _internal_log_records().size();
}
inline int ScopeLogs::log_records_size() const {
  return _internal_log_records_size();
}
inline void ScopeLogs::clear_log_records() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_records_.Clear();
}
inline ::opentelemetry::proto::logs::v1::LogRecord* ScopeLogs::mutable_log_records(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _internal_mutable_log_records()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>* ScopeLogs::mutable_log_records()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_log_records();
}
inline const ::opentelemetry::proto::logs::v1::LogRecord& ScopeLogs::log_records(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _internal_log_records().Get(index);
}
inline ::opentelemetry::proto::logs::v1::LogRecord* ScopeLogs::add_log_records() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::logs::v1::LogRecord* _add = _internal_mutable_log_records()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>& ScopeLogs::log_records() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.ScopeLogs.log_records)
  return _internal_log_records();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>&
ScopeLogs::_internal_log_records() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_records_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::logs::v1::LogRecord>*
ScopeLogs::_internal_mutable_log_records() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.log_records_;
}

// string schema_url = 3;
inline void ScopeLogs::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeLogs::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScopeLogs::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
}
inline std::string* ScopeLogs::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _s;
}
inline const std::string& ScopeLogs::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ScopeLogs::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ScopeLogs::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ScopeLogs::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeLogs::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.ScopeLogs.schema_url)
}

// -------------------------------------------------------------------

// LogRecord

// fixed64 time_unix_nano = 1;
inline void LogRecord::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t LogRecord::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void LogRecord::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.time_unix_nano)
}
inline ::uint64_t LogRecord::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void LogRecord::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// fixed64 observed_time_unix_nano = 11;
inline void LogRecord::clear_observed_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.observed_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t LogRecord::observed_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.observed_time_unix_nano)
  return _internal_observed_time_unix_nano();
}
inline void LogRecord::set_observed_time_unix_nano(::uint64_t value) {
  _internal_set_observed_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.observed_time_unix_nano)
}
inline ::uint64_t LogRecord::_internal_observed_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.observed_time_unix_nano_;
}
inline void LogRecord::_internal_set_observed_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.observed_time_unix_nano_ = value;
}

// .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
inline void LogRecord::clear_severity_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_number_ = 0;
}
inline ::opentelemetry::proto::logs::v1::SeverityNumber LogRecord::severity_number() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.severity_number)
  return _internal_severity_number();
}
inline void LogRecord::set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value) {
  _internal_set_severity_number(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.severity_number)
}
inline ::opentelemetry::proto::logs::v1::SeverityNumber LogRecord::_internal_severity_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opentelemetry::proto::logs::v1::SeverityNumber>(_impl_.severity_number_);
}
inline void LogRecord::_internal_set_severity_number(::opentelemetry::proto::logs::v1::SeverityNumber value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_number_ = value;
}

// string severity_text = 3;
inline void LogRecord::clear_severity_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_text_.ClearToEmpty();
}
inline const std::string& LogRecord::severity_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _internal_severity_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogRecord::set_severity_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.severity_text)
}
inline std::string* LogRecord::mutable_severity_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_severity_text();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _s;
}
inline const std::string& LogRecord::_internal_severity_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.severity_text_.Get();
}
inline void LogRecord::_internal_set_severity_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_text_.Set(value, GetArena());
}
inline std::string* LogRecord::_internal_mutable_severity_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.severity_text_.Mutable( GetArena());
}
inline std::string* LogRecord::release_severity_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.severity_text)
  return _impl_.severity_text_.Release();
}
inline void LogRecord::set_allocated_severity_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.severity_text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.severity_text_.IsDefault()) {
          _impl_.severity_text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.severity_text)
}

// .opentelemetry.proto.common.v1.AnyValue body = 5;
inline bool LogRecord::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::AnyValue& LogRecord::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::common::v1::AnyValue* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::AnyValue&>(::opentelemetry::proto::common::v1::_AnyValue_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::AnyValue& LogRecord::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.body)
  return _internal_body();
}
inline void LogRecord::unsafe_arena_set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::opentelemetry::proto::common::v1::AnyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.logs.v1.LogRecord.body)
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::AnyValue* released = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::unsafe_arena_release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::AnyValue* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::common::v1::AnyValue>(GetArena());
    _impl_.body_ = reinterpret_cast<::opentelemetry::proto::common::v1::AnyValue*>(p);
  }
  return _impl_.body_;
}
inline ::opentelemetry::proto::common::v1::AnyValue* LogRecord::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::common::v1::AnyValue* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.body)
  return _msg;
}
inline void LogRecord::set_allocated_body(::opentelemetry::proto::common::v1::AnyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::opentelemetry::proto::common::v1::AnyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.body)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
inline int LogRecord::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int LogRecord::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* LogRecord::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* LogRecord::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.logs.v1.LogRecord.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& LogRecord::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* LogRecord::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& LogRecord::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.logs.v1.LogRecord.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
LogRecord::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
LogRecord::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 7;
inline void LogRecord::clear_dropped_attributes_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t LogRecord::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void LogRecord::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.dropped_attributes_count)
}
inline ::uint32_t LogRecord::_internal_dropped_attributes_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dropped_attributes_count_;
}
inline void LogRecord::_internal_set_dropped_attributes_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = value;
}

// fixed32 flags = 8;
inline void LogRecord::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t LogRecord::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.flags)
  return _internal_flags();
}
inline void LogRecord::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.flags)
}
inline ::uint32_t LogRecord::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void LogRecord::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = value;
}

// bytes trace_id = 9;
inline void LogRecord::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& LogRecord::trace_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogRecord::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.trace_id)
}
inline std::string* LogRecord::mutable_trace_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _s;
}
inline const std::string& LogRecord::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Get();
}
inline void LogRecord::_internal_set_trace_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.Set(value, GetArena());
}
inline std::string* LogRecord::_internal_mutable_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Mutable( GetArena());
}
inline std::string* LogRecord::release_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.trace_id)
  return _impl_.trace_id_.Release();
}
inline void LogRecord::set_allocated_trace_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.trace_id)
}

// bytes span_id = 10;
inline void LogRecord::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& LogRecord::span_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _internal_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogRecord::set_span_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.logs.v1.LogRecord.span_id)
}
inline std::string* LogRecord::mutable_span_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _s;
}
inline const std::string& LogRecord::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Get();
}
inline void LogRecord::_internal_set_span_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.Set(value, GetArena());
}
inline std::string* LogRecord::_internal_mutable_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Mutable( GetArena());
}
inline std::string* LogRecord::release_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.logs.v1.LogRecord.span_id)
  return _impl_.span_id_.Release();
}
inline void LogRecord::set_allocated_span_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_id_.IsDefault()) {
          _impl_.span_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.logs.v1.LogRecord.span_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::opentelemetry::proto::logs::v1::SeverityNumber> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::logs::v1::SeverityNumber>() {
  return ::opentelemetry::proto::logs::v1::SeverityNumber_descriptor();
}
template <>
struct is_proto_enum<::opentelemetry::proto::logs::v1::LogRecordFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::logs::v1::LogRecordFlags>() {
  return ::opentelemetry::proto::logs::v1::LogRecordFlags_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_2epb_2eh
