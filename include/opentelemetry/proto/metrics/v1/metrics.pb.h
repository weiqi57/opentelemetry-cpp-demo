// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
class Exemplar;
struct ExemplarDefaultTypeInternal;
extern ExemplarDefaultTypeInternal _Exemplar_default_instance_;
class ExponentialHistogram;
struct ExponentialHistogramDefaultTypeInternal;
extern ExponentialHistogramDefaultTypeInternal _ExponentialHistogram_default_instance_;
class ExponentialHistogramDataPoint;
struct ExponentialHistogramDataPointDefaultTypeInternal;
extern ExponentialHistogramDataPointDefaultTypeInternal _ExponentialHistogramDataPoint_default_instance_;
class ExponentialHistogramDataPoint_Buckets;
struct ExponentialHistogramDataPoint_BucketsDefaultTypeInternal;
extern ExponentialHistogramDataPoint_BucketsDefaultTypeInternal _ExponentialHistogramDataPoint_Buckets_default_instance_;
class Gauge;
struct GaugeDefaultTypeInternal;
extern GaugeDefaultTypeInternal _Gauge_default_instance_;
class Histogram;
struct HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class HistogramDataPoint;
struct HistogramDataPointDefaultTypeInternal;
extern HistogramDataPointDefaultTypeInternal _HistogramDataPoint_default_instance_;
class Metric;
struct MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricsData;
struct MetricsDataDefaultTypeInternal;
extern MetricsDataDefaultTypeInternal _MetricsData_default_instance_;
class NumberDataPoint;
struct NumberDataPointDefaultTypeInternal;
extern NumberDataPointDefaultTypeInternal _NumberDataPoint_default_instance_;
class ResourceMetrics;
struct ResourceMetricsDefaultTypeInternal;
extern ResourceMetricsDefaultTypeInternal _ResourceMetrics_default_instance_;
class ScopeMetrics;
struct ScopeMetricsDefaultTypeInternal;
extern ScopeMetricsDefaultTypeInternal _ScopeMetrics_default_instance_;
class Sum;
struct SumDefaultTypeInternal;
extern SumDefaultTypeInternal _Sum_default_instance_;
class Summary;
struct SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class SummaryDataPoint;
struct SummaryDataPointDefaultTypeInternal;
extern SummaryDataPointDefaultTypeInternal _SummaryDataPoint_default_instance_;
class SummaryDataPoint_ValueAtQuantile;
struct SummaryDataPoint_ValueAtQuantileDefaultTypeInternal;
extern SummaryDataPoint_ValueAtQuantileDefaultTypeInternal _SummaryDataPoint_ValueAtQuantile_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
enum AggregationTemporality : int {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
  AGGREGATION_TEMPORALITY_DELTA = 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
  AggregationTemporality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregationTemporality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregationTemporality_IsValid(int value);
extern const uint32_t AggregationTemporality_internal_data_[];
constexpr AggregationTemporality AggregationTemporality_MIN = static_cast<AggregationTemporality>(0);
constexpr AggregationTemporality AggregationTemporality_MAX = static_cast<AggregationTemporality>(2);
constexpr int AggregationTemporality_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AggregationTemporality_descriptor();
template <typename T>
const std::string& AggregationTemporality_Name(T value) {
  static_assert(std::is_same<T, AggregationTemporality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationTemporality_Name().");
  return AggregationTemporality_Name(static_cast<AggregationTemporality>(value));
}
template <>
inline const std::string& AggregationTemporality_Name(AggregationTemporality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AggregationTemporality_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AggregationTemporality_Parse(absl::string_view name, AggregationTemporality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AggregationTemporality>(
      AggregationTemporality_descriptor(), name, value);
}
enum DataPointFlags : int {
  DATA_POINT_FLAGS_DO_NOT_USE = 0,
  DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK = 1,
  DataPointFlags_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataPointFlags_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataPointFlags_IsValid(int value);
extern const uint32_t DataPointFlags_internal_data_[];
constexpr DataPointFlags DataPointFlags_MIN = static_cast<DataPointFlags>(0);
constexpr DataPointFlags DataPointFlags_MAX = static_cast<DataPointFlags>(1);
constexpr int DataPointFlags_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
DataPointFlags_descriptor();
template <typename T>
const std::string& DataPointFlags_Name(T value) {
  static_assert(std::is_same<T, DataPointFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataPointFlags_Name().");
  return DataPointFlags_Name(static_cast<DataPointFlags>(value));
}
template <>
inline const std::string& DataPointFlags_Name(DataPointFlags value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataPointFlags_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool DataPointFlags_Parse(absl::string_view name, DataPointFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataPointFlags>(
      DataPointFlags_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SummaryDataPoint_ValueAtQuantile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) */ {
 public:
  inline SummaryDataPoint_ValueAtQuantile() : SummaryDataPoint_ValueAtQuantile(nullptr) {}
  ~SummaryDataPoint_ValueAtQuantile() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SummaryDataPoint_ValueAtQuantile(
      ::google::protobuf::internal::ConstantInitialized);

  inline SummaryDataPoint_ValueAtQuantile(const SummaryDataPoint_ValueAtQuantile& from) : SummaryDataPoint_ValueAtQuantile(nullptr, from) {}
  inline SummaryDataPoint_ValueAtQuantile(SummaryDataPoint_ValueAtQuantile&& from) noexcept
      : SummaryDataPoint_ValueAtQuantile(nullptr, std::move(from)) {}
  inline SummaryDataPoint_ValueAtQuantile& operator=(const SummaryDataPoint_ValueAtQuantile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDataPoint_ValueAtQuantile& operator=(SummaryDataPoint_ValueAtQuantile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryDataPoint_ValueAtQuantile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryDataPoint_ValueAtQuantile* internal_default_instance() {
    return reinterpret_cast<const SummaryDataPoint_ValueAtQuantile*>(
        &_SummaryDataPoint_ValueAtQuantile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(SummaryDataPoint_ValueAtQuantile& a, SummaryDataPoint_ValueAtQuantile& b) { a.Swap(&b); }
  inline void Swap(SummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryDataPoint_ValueAtQuantile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SummaryDataPoint_ValueAtQuantile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SummaryDataPoint_ValueAtQuantile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SummaryDataPoint_ValueAtQuantile& from) { SummaryDataPoint_ValueAtQuantile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SummaryDataPoint_ValueAtQuantile* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile"; }

 protected:
  explicit SummaryDataPoint_ValueAtQuantile(::google::protobuf::Arena* arena);
  SummaryDataPoint_ValueAtQuantile(::google::protobuf::Arena* arena, const SummaryDataPoint_ValueAtQuantile& from);
  SummaryDataPoint_ValueAtQuantile(::google::protobuf::Arena* arena, SummaryDataPoint_ValueAtQuantile&& from) noexcept
      : SummaryDataPoint_ValueAtQuantile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQuantileFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double quantile = 1;
  void clear_quantile() ;
  double quantile() const;
  void set_quantile(double value);

  private:
  double _internal_quantile() const;
  void _internal_set_quantile(double value);

  public:
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    double quantile_;
    double value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogramDataPoint_Buckets final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets) */ {
 public:
  inline ExponentialHistogramDataPoint_Buckets() : ExponentialHistogramDataPoint_Buckets(nullptr) {}
  ~ExponentialHistogramDataPoint_Buckets() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExponentialHistogramDataPoint_Buckets(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExponentialHistogramDataPoint_Buckets(const ExponentialHistogramDataPoint_Buckets& from) : ExponentialHistogramDataPoint_Buckets(nullptr, from) {}
  inline ExponentialHistogramDataPoint_Buckets(ExponentialHistogramDataPoint_Buckets&& from) noexcept
      : ExponentialHistogramDataPoint_Buckets(nullptr, std::move(from)) {}
  inline ExponentialHistogramDataPoint_Buckets& operator=(const ExponentialHistogramDataPoint_Buckets& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogramDataPoint_Buckets& operator=(ExponentialHistogramDataPoint_Buckets&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExponentialHistogramDataPoint_Buckets& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExponentialHistogramDataPoint_Buckets* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogramDataPoint_Buckets*>(
        &_ExponentialHistogramDataPoint_Buckets_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ExponentialHistogramDataPoint_Buckets& a, ExponentialHistogramDataPoint_Buckets& b) { a.Swap(&b); }
  inline void Swap(ExponentialHistogramDataPoint_Buckets* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogramDataPoint_Buckets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExponentialHistogramDataPoint_Buckets* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ExponentialHistogramDataPoint_Buckets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExponentialHistogramDataPoint_Buckets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExponentialHistogramDataPoint_Buckets& from) { ExponentialHistogramDataPoint_Buckets::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExponentialHistogramDataPoint_Buckets* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets"; }

 protected:
  explicit ExponentialHistogramDataPoint_Buckets(::google::protobuf::Arena* arena);
  ExponentialHistogramDataPoint_Buckets(::google::protobuf::Arena* arena, const ExponentialHistogramDataPoint_Buckets& from);
  ExponentialHistogramDataPoint_Buckets(::google::protobuf::Arena* arena, ExponentialHistogramDataPoint_Buckets&& from) noexcept
      : ExponentialHistogramDataPoint_Buckets(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketCountsFieldNumber = 2,
    kOffsetFieldNumber = 1,
  };
  // repeated uint64 bucket_counts = 2;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;

  public:
  void clear_bucket_counts() ;
  ::uint64_t bucket_counts(int index) const;
  void set_bucket_counts(int index, ::uint64_t value);
  void add_bucket_counts(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& bucket_counts() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_bucket_counts();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_bucket_counts() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_bucket_counts();

  public:
  // sint32 offset = 1;
  void clear_offset() ;
  ::int32_t offset() const;
  void set_offset(::int32_t value);

  private:
  ::int32_t _internal_offset() const;
  void _internal_set_offset(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint64_t> bucket_counts_;
    mutable ::google::protobuf::internal::CachedSize _bucket_counts_cached_byte_size_;
    ::int32_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.SummaryDataPoint) */ {
 public:
  inline SummaryDataPoint() : SummaryDataPoint(nullptr) {}
  ~SummaryDataPoint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SummaryDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline SummaryDataPoint(const SummaryDataPoint& from) : SummaryDataPoint(nullptr, from) {}
  inline SummaryDataPoint(SummaryDataPoint&& from) noexcept
      : SummaryDataPoint(nullptr, std::move(from)) {}
  inline SummaryDataPoint& operator=(const SummaryDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDataPoint& operator=(SummaryDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryDataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryDataPoint* internal_default_instance() {
    return reinterpret_cast<const SummaryDataPoint*>(
        &_SummaryDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SummaryDataPoint& a, SummaryDataPoint& b) { a.Swap(&b); }
  inline void Swap(SummaryDataPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryDataPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SummaryDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SummaryDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SummaryDataPoint& from) { SummaryDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SummaryDataPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.SummaryDataPoint"; }

 protected:
  explicit SummaryDataPoint(::google::protobuf::Arena* arena);
  SummaryDataPoint(::google::protobuf::Arena* arena, const SummaryDataPoint& from);
  SummaryDataPoint(::google::protobuf::Arena* arena, SummaryDataPoint&& from) noexcept
      : SummaryDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using ValueAtQuantile = SummaryDataPoint_ValueAtQuantile;

  // accessors -------------------------------------------------------
  enum : int {
    kQuantileValuesFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kFlagsFieldNumber = 8,
  };
  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
  int quantile_values_size() const;
  private:
  int _internal_quantile_values_size() const;

  public:
  void clear_quantile_values() ;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* mutable_quantile_values(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>* mutable_quantile_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>& _internal_quantile_values() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>* _internal_mutable_quantile_values();
  public:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& quantile_values(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* add_quantile_values();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>& quantile_values() const;
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // fixed64 count = 4;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // double sum = 5;
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // uint32 flags = 8;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile > quantile_values_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t time_unix_nano_;
    ::uint64_t count_;
    double sum_;
    ::uint32_t flags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Exemplar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Exemplar) */ {
 public:
  inline Exemplar() : Exemplar(nullptr) {}
  ~Exemplar() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Exemplar(
      ::google::protobuf::internal::ConstantInitialized);

  inline Exemplar(const Exemplar& from) : Exemplar(nullptr, from) {}
  inline Exemplar(Exemplar&& from) noexcept
      : Exemplar(nullptr, std::move(from)) {}
  inline Exemplar& operator=(const Exemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exemplar& operator=(Exemplar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exemplar& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kAsDouble = 3,
    kAsInt = 6,
    VALUE_NOT_SET = 0,
  };
  static inline const Exemplar* internal_default_instance() {
    return reinterpret_cast<const Exemplar*>(
        &_Exemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Exemplar& a, Exemplar& b) { a.Swap(&b); }
  inline void Swap(Exemplar* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exemplar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Exemplar* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Exemplar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Exemplar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Exemplar& from) { Exemplar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Exemplar* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Exemplar"; }

 protected:
  explicit Exemplar(::google::protobuf::Arena* arena);
  Exemplar(::google::protobuf::Arena* arena, const Exemplar& from);
  Exemplar(::google::protobuf::Arena* arena, Exemplar&& from) noexcept
      : Exemplar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilteredAttributesFieldNumber = 7,
    kSpanIdFieldNumber = 4,
    kTraceIdFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 2,
    kAsDoubleFieldNumber = 3,
    kAsIntFieldNumber = 6,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
  int filtered_attributes_size() const;
  private:
  int _internal_filtered_attributes_size() const;

  public:
  void clear_filtered_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_filtered_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_filtered_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_filtered_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_filtered_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& filtered_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_filtered_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& filtered_attributes() const;
  // bytes span_id = 4;
  void clear_span_id() ;
  const std::string& span_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* value);

  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(
      const std::string& value);
  std::string* _internal_mutable_span_id();

  public:
  // bytes trace_id = 5;
  void clear_trace_id() ;
  const std::string& trace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* value);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // fixed64 time_unix_nano = 2;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // double as_double = 3;
  bool has_as_double() const;
  void clear_as_double() ;
  double as_double() const;
  void set_as_double(double value);

  private:
  double _internal_as_double() const;
  void _internal_set_as_double(double value);

  public:
  // sfixed64 as_int = 6;
  bool has_as_int() const;
  void clear_as_int() ;
  ::int64_t as_int() const;
  void set_as_int(::int64_t value);

  private:
  ::int64_t _internal_as_int() const;
  void _internal_set_as_int(::int64_t value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Exemplar)
 private:
  class _Internal;
  void set_has_as_double();
  void set_has_as_int();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 6, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > filtered_attributes_;
    ::google::protobuf::internal::ArenaStringPtr span_id_;
    ::google::protobuf::internal::ArenaStringPtr trace_id_;
    ::uint64_t time_unix_nano_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      double as_double_;
      ::int64_t as_int_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Summary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  ~Summary() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Summary(
      ::google::protobuf::internal::ConstantInitialized);

  inline Summary(const Summary& from) : Summary(nullptr, from) {}
  inline Summary(Summary&& from) noexcept
      : Summary(nullptr, std::move(from)) {}
  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Summary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
        &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Summary& a, Summary& b) { a.Swap(&b); }
  inline void Swap(Summary* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Summary* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Summary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Summary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Summary& from) { Summary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Summary* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Summary"; }

 protected:
  explicit Summary(::google::protobuf::Arena* arena);
  Summary(::google::protobuf::Arena* arena, const Summary& from);
  Summary(::google::protobuf::Arena* arena, Summary&& from) noexcept
      : Summary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>* _internal_mutable_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>& data_points() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Summary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint > data_points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class NumberDataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.NumberDataPoint) */ {
 public:
  inline NumberDataPoint() : NumberDataPoint(nullptr) {}
  ~NumberDataPoint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NumberDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline NumberDataPoint(const NumberDataPoint& from) : NumberDataPoint(nullptr, from) {}
  inline NumberDataPoint(NumberDataPoint&& from) noexcept
      : NumberDataPoint(nullptr, std::move(from)) {}
  inline NumberDataPoint& operator=(const NumberDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberDataPoint& operator=(NumberDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberDataPoint& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kAsDouble = 4,
    kAsInt = 6,
    VALUE_NOT_SET = 0,
  };
  static inline const NumberDataPoint* internal_default_instance() {
    return reinterpret_cast<const NumberDataPoint*>(
        &_NumberDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(NumberDataPoint& a, NumberDataPoint& b) { a.Swap(&b); }
  inline void Swap(NumberDataPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberDataPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NumberDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NumberDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NumberDataPoint& from) { NumberDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NumberDataPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.NumberDataPoint"; }

 protected:
  explicit NumberDataPoint(::google::protobuf::Arena* arena);
  NumberDataPoint(::google::protobuf::Arena* arena, const NumberDataPoint& from);
  NumberDataPoint(::google::protobuf::Arena* arena, NumberDataPoint&& from) noexcept
      : NumberDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExemplarsFieldNumber = 5,
    kAttributesFieldNumber = 7,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kFlagsFieldNumber = 8,
    kAsDoubleFieldNumber = 4,
    kAsIntFieldNumber = 6,
  };
  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;

  public:
  void clear_exemplars() ;
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* mutable_exemplars();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& _internal_exemplars() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* _internal_mutable_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& exemplars() const;
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // uint32 flags = 8;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // double as_double = 4;
  bool has_as_double() const;
  void clear_as_double() ;
  double as_double() const;
  void set_as_double(double value);

  private:
  double _internal_as_double() const;
  void _internal_set_as_double(double value);

  public:
  // sfixed64 as_int = 6;
  bool has_as_int() const;
  void clear_as_int() ;
  ::int64_t as_int() const;
  void set_as_int(::int64_t value);

  private:
  ::int64_t _internal_as_int() const;
  void _internal_set_as_int(::int64_t value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.NumberDataPoint)
 private:
  class _Internal;
  void set_has_as_double();
  void set_has_as_int();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t time_unix_nano_;
    ::uint32_t flags_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      double as_double_;
      ::int64_t as_int_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class HistogramDataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.HistogramDataPoint) */ {
 public:
  inline HistogramDataPoint() : HistogramDataPoint(nullptr) {}
  ~HistogramDataPoint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistogramDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistogramDataPoint(const HistogramDataPoint& from) : HistogramDataPoint(nullptr, from) {}
  inline HistogramDataPoint(HistogramDataPoint&& from) noexcept
      : HistogramDataPoint(nullptr, std::move(from)) {}
  inline HistogramDataPoint& operator=(const HistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramDataPoint& operator=(HistogramDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistogramDataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const HistogramDataPoint*>(
        &_HistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(HistogramDataPoint& a, HistogramDataPoint& b) { a.Swap(&b); }
  inline void Swap(HistogramDataPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistogramDataPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<HistogramDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistogramDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistogramDataPoint& from) { HistogramDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HistogramDataPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.HistogramDataPoint"; }

 protected:
  explicit HistogramDataPoint(::google::protobuf::Arena* arena);
  HistogramDataPoint(::google::protobuf::Arena* arena, const HistogramDataPoint& from);
  HistogramDataPoint(::google::protobuf::Arena* arena, HistogramDataPoint&& from) noexcept
      : HistogramDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBucketCountsFieldNumber = 6,
    kExplicitBoundsFieldNumber = 7,
    kExemplarsFieldNumber = 8,
    kAttributesFieldNumber = 9,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kMinFieldNumber = 11,
    kMaxFieldNumber = 12,
    kFlagsFieldNumber = 10,
  };
  // repeated fixed64 bucket_counts = 6;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;

  public:
  void clear_bucket_counts() ;
  ::uint64_t bucket_counts(int index) const;
  void set_bucket_counts(int index, ::uint64_t value);
  void add_bucket_counts(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& bucket_counts() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_bucket_counts();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_bucket_counts() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_bucket_counts();

  public:
  // repeated double explicit_bounds = 7;
  int explicit_bounds_size() const;
  private:
  int _internal_explicit_bounds_size() const;

  public:
  void clear_explicit_bounds() ;
  double explicit_bounds(int index) const;
  void set_explicit_bounds(int index, double value);
  void add_explicit_bounds(double value);
  const ::google::protobuf::RepeatedField<double>& explicit_bounds() const;
  ::google::protobuf::RepeatedField<double>* mutable_explicit_bounds();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_explicit_bounds() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_explicit_bounds();

  public:
  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;

  public:
  void clear_exemplars() ;
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* mutable_exemplars();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& _internal_exemplars() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* _internal_mutable_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& exemplars() const;
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // fixed64 count = 4;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // optional double sum = 5;
  bool has_sum() const;
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // optional double min = 11;
  bool has_min() const;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // optional double max = 12;
  bool has_max() const;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // uint32 flags = 10;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.HistogramDataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint64_t> bucket_counts_;
    ::google::protobuf::RepeatedField<double> explicit_bounds_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t time_unix_nano_;
    ::uint64_t count_;
    double sum_;
    double min_;
    double max_;
    ::uint32_t flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogramDataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint) */ {
 public:
  inline ExponentialHistogramDataPoint() : ExponentialHistogramDataPoint(nullptr) {}
  ~ExponentialHistogramDataPoint() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExponentialHistogramDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExponentialHistogramDataPoint(const ExponentialHistogramDataPoint& from) : ExponentialHistogramDataPoint(nullptr, from) {}
  inline ExponentialHistogramDataPoint(ExponentialHistogramDataPoint&& from) noexcept
      : ExponentialHistogramDataPoint(nullptr, std::move(from)) {}
  inline ExponentialHistogramDataPoint& operator=(const ExponentialHistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogramDataPoint& operator=(ExponentialHistogramDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExponentialHistogramDataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExponentialHistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogramDataPoint*>(
        &_ExponentialHistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ExponentialHistogramDataPoint& a, ExponentialHistogramDataPoint& b) { a.Swap(&b); }
  inline void Swap(ExponentialHistogramDataPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogramDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExponentialHistogramDataPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ExponentialHistogramDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExponentialHistogramDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExponentialHistogramDataPoint& from) { ExponentialHistogramDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExponentialHistogramDataPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint"; }

 protected:
  explicit ExponentialHistogramDataPoint(::google::protobuf::Arena* arena);
  ExponentialHistogramDataPoint(::google::protobuf::Arena* arena, const ExponentialHistogramDataPoint& from);
  ExponentialHistogramDataPoint(::google::protobuf::Arena* arena, ExponentialHistogramDataPoint&& from) noexcept
      : ExponentialHistogramDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using Buckets = ExponentialHistogramDataPoint_Buckets;

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 1,
    kExemplarsFieldNumber = 11,
    kPositiveFieldNumber = 8,
    kNegativeFieldNumber = 9,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kZeroCountFieldNumber = 7,
    kScaleFieldNumber = 6,
    kFlagsFieldNumber = 10,
    kMinFieldNumber = 12,
    kMaxFieldNumber = 13,
    kZeroThresholdFieldNumber = 14,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;

  public:
  void clear_exemplars() ;
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* mutable_exemplars();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& _internal_exemplars() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* _internal_mutable_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& exemplars() const;
  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
  bool has_positive() const;
  void clear_positive() ;
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& positive() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* release_positive();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* mutable_positive();
  void set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value);
  void unsafe_arena_set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* unsafe_arena_release_positive();

  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& _internal_positive() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _internal_mutable_positive();

  public:
  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
  bool has_negative() const;
  void clear_negative() ;
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& negative() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* release_negative();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* mutable_negative();
  void set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value);
  void unsafe_arena_set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* unsafe_arena_release_negative();

  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& _internal_negative() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _internal_mutable_negative();

  public:
  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano() ;
  ::uint64_t time_unix_nano() const;
  void set_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::uint64_t value);

  public:
  // fixed64 count = 4;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // optional double sum = 5;
  bool has_sum() const;
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // fixed64 zero_count = 7;
  void clear_zero_count() ;
  ::uint64_t zero_count() const;
  void set_zero_count(::uint64_t value);

  private:
  ::uint64_t _internal_zero_count() const;
  void _internal_set_zero_count(::uint64_t value);

  public:
  // sint32 scale = 6;
  void clear_scale() ;
  ::int32_t scale() const;
  void set_scale(::int32_t value);

  private:
  ::int32_t _internal_scale() const;
  void _internal_set_scale(::int32_t value);

  public:
  // uint32 flags = 10;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional double min = 12;
  bool has_min() const;
  void clear_min() ;
  double min() const;
  void set_min(double value);

  private:
  double _internal_min() const;
  void _internal_set_min(double value);

  public:
  // optional double max = 13;
  bool has_max() const;
  void clear_max() ;
  double max() const;
  void set_max(double value);

  private:
  double _internal_max() const;
  void _internal_set_max(double value);

  public:
  // double zero_threshold = 14;
  void clear_zero_threshold() ;
  double zero_threshold() const;
  void set_zero_threshold(double value);

  private:
  double _internal_zero_threshold() const;
  void _internal_set_zero_threshold(double value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
    ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive_;
    ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t time_unix_nano_;
    ::uint64_t count_;
    double sum_;
    ::uint64_t zero_count_;
    ::int32_t scale_;
    ::uint32_t flags_;
    double min_;
    double max_;
    double zero_threshold_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Sum final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Sum) */ {
 public:
  inline Sum() : Sum(nullptr) {}
  ~Sum() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Sum(
      ::google::protobuf::internal::ConstantInitialized);

  inline Sum(const Sum& from) : Sum(nullptr, from) {}
  inline Sum(Sum&& from) noexcept
      : Sum(nullptr, std::move(from)) {}
  inline Sum& operator=(const Sum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sum& operator=(Sum&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sum& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sum* internal_default_instance() {
    return reinterpret_cast<const Sum*>(
        &_Sum_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Sum& a, Sum& b) { a.Swap(&b); }
  inline void Swap(Sum* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sum* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sum* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Sum>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sum& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Sum& from) { Sum::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Sum* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Sum"; }

 protected:
  explicit Sum(::google::protobuf::Arena* arena);
  Sum(::google::protobuf::Arena* arena, const Sum& from);
  Sum(::google::protobuf::Arena* arena, Sum&& from) noexcept
      : Sum(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
    kIsMonotonicFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* _internal_mutable_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& data_points() const;
  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality() ;
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  public:
  // bool is_monotonic = 3;
  void clear_is_monotonic() ;
  bool is_monotonic() const;
  void set_is_monotonic(bool value);

  private:
  bool _internal_is_monotonic() const;
  void _internal_set_is_monotonic(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Sum)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint > data_points_;
    int aggregation_temporality_;
    bool is_monotonic_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Histogram final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Histogram) */ {
 public:
  inline Histogram() : Histogram(nullptr) {}
  ~Histogram() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Histogram(
      ::google::protobuf::internal::ConstantInitialized);

  inline Histogram(const Histogram& from) : Histogram(nullptr, from) {}
  inline Histogram(Histogram&& from) noexcept
      : Histogram(nullptr, std::move(from)) {}
  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histogram& operator=(Histogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Histogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
        &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Histogram& a, Histogram& b) { a.Swap(&b); }
  inline void Swap(Histogram* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Histogram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Histogram* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Histogram>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Histogram& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Histogram& from) { Histogram::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Histogram* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Histogram"; }

 protected:
  explicit Histogram(::google::protobuf::Arena* arena);
  Histogram(::google::protobuf::Arena* arena, const Histogram& from);
  Histogram(::google::protobuf::Arena* arena, Histogram&& from) noexcept
      : Histogram(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>* _internal_mutable_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>& data_points() const;
  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality() ;
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Histogram)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint > data_points_;
    int aggregation_temporality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Gauge final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Gauge) */ {
 public:
  inline Gauge() : Gauge(nullptr) {}
  ~Gauge() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Gauge(
      ::google::protobuf::internal::ConstantInitialized);

  inline Gauge(const Gauge& from) : Gauge(nullptr, from) {}
  inline Gauge(Gauge&& from) noexcept
      : Gauge(nullptr, std::move(from)) {}
  inline Gauge& operator=(const Gauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gauge& operator=(Gauge&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gauge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gauge* internal_default_instance() {
    return reinterpret_cast<const Gauge*>(
        &_Gauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Gauge& a, Gauge& b) { a.Swap(&b); }
  inline void Swap(Gauge* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gauge* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gauge* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Gauge>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Gauge& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Gauge& from) { Gauge::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Gauge* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Gauge"; }

 protected:
  explicit Gauge(::google::protobuf::Arena* arena);
  Gauge(::google::protobuf::Arena* arena, const Gauge& from);
  Gauge(::google::protobuf::Arena* arena, Gauge&& from) noexcept
      : Gauge(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* _internal_mutable_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& data_points() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Gauge)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint > data_points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogram final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogram) */ {
 public:
  inline ExponentialHistogram() : ExponentialHistogram(nullptr) {}
  ~ExponentialHistogram() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExponentialHistogram(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExponentialHistogram(const ExponentialHistogram& from) : ExponentialHistogram(nullptr, from) {}
  inline ExponentialHistogram(ExponentialHistogram&& from) noexcept
      : ExponentialHistogram(nullptr, std::move(from)) {}
  inline ExponentialHistogram& operator=(const ExponentialHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogram& operator=(ExponentialHistogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExponentialHistogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExponentialHistogram* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogram*>(
        &_ExponentialHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ExponentialHistogram& a, ExponentialHistogram& b) { a.Swap(&b); }
  inline void Swap(ExponentialHistogram* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExponentialHistogram* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ExponentialHistogram>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExponentialHistogram& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExponentialHistogram& from) { ExponentialHistogram::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExponentialHistogram* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.ExponentialHistogram"; }

 protected:
  explicit ExponentialHistogram(::google::protobuf::Arena* arena);
  ExponentialHistogram(::google::protobuf::Arena* arena, const ExponentialHistogram& from);
  ExponentialHistogram(::google::protobuf::Arena* arena, ExponentialHistogram&& from) noexcept
      : ExponentialHistogram(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;

  public:
  void clear_data_points() ;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* mutable_data_points(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>* mutable_data_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>& _internal_data_points() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>* _internal_mutable_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* add_data_points();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>& data_points() const;
  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality() ;
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogram)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint > data_points_;
    int aggregation_temporality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Metric final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  ~Metric() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metric(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metric(const Metric& from) : Metric(nullptr, from) {}
  inline Metric(Metric&& from) noexcept
      : Metric(nullptr, std::move(from)) {}
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metric& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kGauge = 5,
    kSum = 7,
    kHistogram = 9,
    kExponentialHistogram = 10,
    kSummary = 11,
    DATA_NOT_SET = 0,
  };
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
        &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Metric& a, Metric& b) { a.Swap(&b); }
  inline void Swap(Metric* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metric* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Metric>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metric& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metric& from) { Metric::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Metric* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.Metric"; }

 protected:
  explicit Metric(::google::protobuf::Arena* arena);
  Metric(::google::protobuf::Arena* arena, const Metric& from);
  Metric(::google::protobuf::Arena* arena, Metric&& from) noexcept
      : Metric(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 12,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 3,
    kGaugeFieldNumber = 5,
    kSumFieldNumber = 7,
    kHistogramFieldNumber = 9,
    kExponentialHistogramFieldNumber = 10,
    kSummaryFieldNumber = 11,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_metadata();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_metadata();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& metadata(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_metadata();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& metadata() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string unit = 3;
  void clear_unit() ;
  const std::string& unit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unit(Arg_&& arg, Args_... args);
  std::string* mutable_unit();
  PROTOBUF_NODISCARD std::string* release_unit();
  void set_allocated_unit(std::string* value);

  private:
  const std::string& _internal_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unit(
      const std::string& value);
  std::string* _internal_mutable_unit();

  public:
  // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;

  public:
  void clear_gauge() ;
  const ::opentelemetry::proto::metrics::v1::Gauge& gauge() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::Gauge* release_gauge();
  ::opentelemetry::proto::metrics::v1::Gauge* mutable_gauge();
  void set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* value);
  void unsafe_arena_set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* value);
  ::opentelemetry::proto::metrics::v1::Gauge* unsafe_arena_release_gauge();

  private:
  const ::opentelemetry::proto::metrics::v1::Gauge& _internal_gauge() const;
  ::opentelemetry::proto::metrics::v1::Gauge* _internal_mutable_gauge();

  public:
  // .opentelemetry.proto.metrics.v1.Sum sum = 7;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;

  public:
  void clear_sum() ;
  const ::opentelemetry::proto::metrics::v1::Sum& sum() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::Sum* release_sum();
  ::opentelemetry::proto::metrics::v1::Sum* mutable_sum();
  void set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* value);
  void unsafe_arena_set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* value);
  ::opentelemetry::proto::metrics::v1::Sum* unsafe_arena_release_sum();

  private:
  const ::opentelemetry::proto::metrics::v1::Sum& _internal_sum() const;
  ::opentelemetry::proto::metrics::v1::Sum* _internal_mutable_sum();

  public:
  // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;

  public:
  void clear_histogram() ;
  const ::opentelemetry::proto::metrics::v1::Histogram& histogram() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::Histogram* release_histogram();
  ::opentelemetry::proto::metrics::v1::Histogram* mutable_histogram();
  void set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* value);
  void unsafe_arena_set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* value);
  ::opentelemetry::proto::metrics::v1::Histogram* unsafe_arena_release_histogram();

  private:
  const ::opentelemetry::proto::metrics::v1::Histogram& _internal_histogram() const;
  ::opentelemetry::proto::metrics::v1::Histogram* _internal_mutable_histogram();

  public:
  // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
  bool has_exponential_histogram() const;
  private:
  bool _internal_has_exponential_histogram() const;

  public:
  void clear_exponential_histogram() ;
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& exponential_histogram() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::ExponentialHistogram* release_exponential_histogram();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* mutable_exponential_histogram();
  void set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* value);
  void unsafe_arena_set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* value);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* unsafe_arena_release_exponential_histogram();

  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& _internal_exponential_histogram() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* _internal_mutable_exponential_histogram();

  public:
  // .opentelemetry.proto.metrics.v1.Summary summary = 11;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;

  public:
  void clear_summary() ;
  const ::opentelemetry::proto::metrics::v1::Summary& summary() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::metrics::v1::Summary* release_summary();
  ::opentelemetry::proto::metrics::v1::Summary* mutable_summary();
  void set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* value);
  void unsafe_arena_set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* value);
  ::opentelemetry::proto::metrics::v1::Summary* unsafe_arena_release_summary();

  private:
  const ::opentelemetry::proto::metrics::v1::Summary& _internal_summary() const;
  ::opentelemetry::proto::metrics::v1::Summary* _internal_mutable_summary();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Metric)
 private:
  class _Internal;
  void set_has_gauge();
  void set_has_sum();
  void set_has_histogram();
  void set_has_exponential_histogram();
  void set_has_summary();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 9, 6,
      73, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr unit_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::opentelemetry::proto::metrics::v1::Gauge* gauge_;
      ::opentelemetry::proto::metrics::v1::Sum* sum_;
      ::opentelemetry::proto::metrics::v1::Histogram* histogram_;
      ::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram_;
      ::opentelemetry::proto::metrics::v1::Summary* summary_;
    } data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ScopeMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ScopeMetrics) */ {
 public:
  inline ScopeMetrics() : ScopeMetrics(nullptr) {}
  ~ScopeMetrics() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScopeMetrics(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScopeMetrics(const ScopeMetrics& from) : ScopeMetrics(nullptr, from) {}
  inline ScopeMetrics(ScopeMetrics&& from) noexcept
      : ScopeMetrics(nullptr, std::move(from)) {}
  inline ScopeMetrics& operator=(const ScopeMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeMetrics& operator=(ScopeMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeMetrics* internal_default_instance() {
    return reinterpret_cast<const ScopeMetrics*>(
        &_ScopeMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ScopeMetrics& a, ScopeMetrics& b) { a.Swap(&b); }
  inline void Swap(ScopeMetrics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeMetrics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeMetrics* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScopeMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScopeMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScopeMetrics& from) { ScopeMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScopeMetrics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.ScopeMetrics"; }

 protected:
  explicit ScopeMetrics(::google::protobuf::Arena* arena);
  ScopeMetrics(::google::protobuf::Arena* arena, const ScopeMetrics& from);
  ScopeMetrics(::google::protobuf::Arena* arena, ScopeMetrics&& from) noexcept
      : ScopeMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetricsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;

  public:
  void clear_metrics() ;
  ::opentelemetry::proto::metrics::v1::Metric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>* mutable_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>& _internal_metrics() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>* _internal_mutable_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::Metric& metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::Metric* add_metrics();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>& metrics() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  void unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ScopeMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric > metrics_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ResourceMetrics final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ResourceMetrics) */ {
 public:
  inline ResourceMetrics() : ResourceMetrics(nullptr) {}
  ~ResourceMetrics() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceMetrics(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceMetrics(const ResourceMetrics& from) : ResourceMetrics(nullptr, from) {}
  inline ResourceMetrics(ResourceMetrics&& from) noexcept
      : ResourceMetrics(nullptr, std::move(from)) {}
  inline ResourceMetrics& operator=(const ResourceMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMetrics& operator=(ResourceMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceMetrics* internal_default_instance() {
    return reinterpret_cast<const ResourceMetrics*>(
        &_ResourceMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceMetrics& a, ResourceMetrics& b) { a.Swap(&b); }
  inline void Swap(ResourceMetrics* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMetrics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceMetrics* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResourceMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceMetrics& from) { ResourceMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceMetrics* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.ResourceMetrics"; }

 protected:
  explicit ResourceMetrics(::google::protobuf::Arena* arena);
  ResourceMetrics(::google::protobuf::Arena* arena, const ResourceMetrics& from);
  ResourceMetrics(::google::protobuf::Arena* arena, ResourceMetrics&& from) noexcept
      : ResourceMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScopeMetricsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
  int scope_metrics_size() const;
  private:
  int _internal_scope_metrics_size() const;

  public:
  void clear_scope_metrics() ;
  ::opentelemetry::proto::metrics::v1::ScopeMetrics* mutable_scope_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>* mutable_scope_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>& _internal_scope_metrics() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>* _internal_mutable_scope_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::ScopeMetrics& scope_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ScopeMetrics* add_scope_metrics();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>& scope_metrics() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  void unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ResourceMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ScopeMetrics > scope_metrics_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MetricsData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.MetricsData) */ {
 public:
  inline MetricsData() : MetricsData(nullptr) {}
  ~MetricsData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MetricsData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MetricsData(const MetricsData& from) : MetricsData(nullptr, from) {}
  inline MetricsData(MetricsData&& from) noexcept
      : MetricsData(nullptr, std::move(from)) {}
  inline MetricsData& operator=(const MetricsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsData& operator=(MetricsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricsData* internal_default_instance() {
    return reinterpret_cast<const MetricsData*>(
        &_MetricsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MetricsData& a, MetricsData& b) { a.Swap(&b); }
  inline void Swap(MetricsData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricsData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MetricsData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MetricsData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MetricsData& from) { MetricsData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MetricsData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.metrics.v1.MetricsData"; }

 protected:
  explicit MetricsData(::google::protobuf::Arena* arena);
  MetricsData(::google::protobuf::Arena* arena, const MetricsData& from);
  MetricsData(::google::protobuf::Arena* arena, MetricsData&& from) noexcept
      : MetricsData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourceMetricsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  int resource_metrics_size() const;
  private:
  int _internal_resource_metrics_size() const;

  public:
  void clear_resource_metrics() ;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* mutable_resource_metrics(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>* mutable_resource_metrics();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>& _internal_resource_metrics() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>* _internal_mutable_resource_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::ResourceMetrics& resource_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* add_resource_metrics();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>& resource_metrics() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.MetricsData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics > resource_metrics_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MetricsData

// repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
inline int MetricsData::_internal_resource_metrics_size() const {
  return _internal_resource_metrics().size();
}
inline int MetricsData::resource_metrics_size() const {
  return _internal_resource_metrics_size();
}
inline void MetricsData::clear_resource_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* MetricsData::mutable_resource_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _internal_mutable_resource_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>* MetricsData::mutable_resource_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_metrics();
}
inline const ::opentelemetry::proto::metrics::v1::ResourceMetrics& MetricsData::resource_metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _internal_resource_metrics().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* MetricsData::add_resource_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* _add = _internal_mutable_resource_metrics()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>& MetricsData::resource_metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _internal_resource_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>&
MetricsData::_internal_resource_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ResourceMetrics>*
MetricsData::_internal_mutable_resource_metrics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_metrics_;
}

// -------------------------------------------------------------------

// ResourceMetrics

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceMetrics::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _internal_resource();
}
inline void ResourceMetrics::unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _msg;
}
inline void ResourceMetrics::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}

// repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
inline int ResourceMetrics::_internal_scope_metrics_size() const {
  return _internal_scope_metrics().size();
}
inline int ResourceMetrics::scope_metrics_size() const {
  return _internal_scope_metrics_size();
}
inline void ResourceMetrics::clear_scope_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scope_metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::ScopeMetrics* ResourceMetrics::mutable_scope_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
  return _internal_mutable_scope_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>* ResourceMetrics::mutable_scope_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scope_metrics();
}
inline const ::opentelemetry::proto::metrics::v1::ScopeMetrics& ResourceMetrics::scope_metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
  return _internal_scope_metrics().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::ScopeMetrics* ResourceMetrics::add_scope_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::ScopeMetrics* _add = _internal_mutable_scope_metrics()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>& ResourceMetrics::scope_metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ResourceMetrics.scope_metrics)
  return _internal_scope_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>&
ResourceMetrics::_internal_scope_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scope_metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ScopeMetrics>*
ResourceMetrics::_internal_mutable_scope_metrics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scope_metrics_;
}

// string schema_url = 3;
inline void ResourceMetrics::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceMetrics::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceMetrics::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}
inline std::string* ResourceMetrics::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return _s;
}
inline const std::string& ResourceMetrics::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ResourceMetrics::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ResourceMetrics::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ResourceMetrics::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceMetrics::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}

// -------------------------------------------------------------------

// ScopeMetrics

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeMetrics::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeMetrics::_internal_scope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeMetrics::scope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)
  return _internal_scope();
}
inline void ScopeMetrics::unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeMetrics::release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* released = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeMetrics::unsafe_arena_release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeMetrics::_internal_mutable_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArena());
    _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(p);
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeMetrics::mutable_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)
  return _msg;
}
inline void ScopeMetrics::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ScopeMetrics.scope)
}

// repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
inline int ScopeMetrics::_internal_metrics_size() const {
  return _internal_metrics().size();
}
inline int ScopeMetrics::metrics_size() const {
  return _internal_metrics_size();
}
inline void ScopeMetrics::clear_metrics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Metric* ScopeMetrics::mutable_metrics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
  return _internal_mutable_metrics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>* ScopeMetrics::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metrics();
}
inline const ::opentelemetry::proto::metrics::v1::Metric& ScopeMetrics::metrics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
  return _internal_metrics().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::Metric* ScopeMetrics::add_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::Metric* _add = _internal_mutable_metrics()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>& ScopeMetrics::metrics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ScopeMetrics.metrics)
  return _internal_metrics();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>&
ScopeMetrics::_internal_metrics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metrics_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Metric>*
ScopeMetrics::_internal_mutable_metrics() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metrics_;
}

// string schema_url = 3;
inline void ScopeMetrics::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeMetrics::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScopeMetrics::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
}
inline std::string* ScopeMetrics::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
  return _s;
}
inline const std::string& ScopeMetrics::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ScopeMetrics::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ScopeMetrics::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ScopeMetrics::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeMetrics::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url)
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metric::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metric::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.name)
}
inline std::string* Metric::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.name)
  return _s;
}
inline const std::string& Metric::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Metric::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Metric::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.name)
  return _impl_.name_.Release();
}
inline void Metric::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.name)
}

// string description = 2;
inline void Metric::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Metric::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metric::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.description)
}
inline std::string* Metric::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.description)
  return _s;
}
inline const std::string& Metric::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Metric::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Metric::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Metric::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.description)
  return _impl_.description_.Release();
}
inline void Metric::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.description)
}

// string unit = 3;
inline void Metric::clear_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_.ClearToEmpty();
}
inline const std::string& Metric::unit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.unit)
  return _internal_unit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metric::set_unit(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline std::string* Metric::mutable_unit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.unit)
  return _s;
}
inline const std::string& Metric::_internal_unit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_.Get();
}
inline void Metric::_internal_set_unit(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_.Set(value, GetArena());
}
inline std::string* Metric::_internal_mutable_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.unit_.Mutable( GetArena());
}
inline std::string* Metric::release_unit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.unit)
  return _impl_.unit_.Release();
}
inline void Metric::set_allocated_unit(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unit_.IsDefault()) {
          _impl_.unit_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.unit)
}

// .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
inline bool Metric::has_gauge() const {
  return data_case() == kGauge;
}
inline bool Metric::_internal_has_gauge() const {
  return data_case() == kGauge;
}
inline void Metric::set_has_gauge() {
  _impl_._oneof_case_[0] = kGauge;
}
inline void Metric::clear_gauge() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kGauge) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.gauge_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.gauge)
  if (data_case() == kGauge) {
    clear_has_data();
    auto* temp = _impl_.data_.gauge_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Gauge& Metric::_internal_gauge() const {
  return data_case() == kGauge ? *_impl_.data_.gauge_ : reinterpret_cast<::opentelemetry::proto::metrics::v1::Gauge&>(::opentelemetry::proto::metrics::v1::_Gauge_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Gauge& Metric::gauge() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.gauge)
  return _internal_gauge();
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.gauge)
  if (data_case() == kGauge) {
    clear_has_data();
    auto* temp = _impl_.data_.gauge_;
    _impl_.data_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_gauge();
    _impl_.data_.gauge_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.gauge)
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::_internal_mutable_gauge() {
  if (data_case() != kGauge) {
    clear_data();
    set_has_gauge();
    _impl_.data_.gauge_ =
        ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::Gauge>(GetArena());
  }
  return _impl_.data_.gauge_;
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::mutable_gauge() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opentelemetry::proto::metrics::v1::Gauge* _msg = _internal_mutable_gauge();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.gauge)
  return _msg;
}

// .opentelemetry.proto.metrics.v1.Sum sum = 7;
inline bool Metric::has_sum() const {
  return data_case() == kSum;
}
inline bool Metric::_internal_has_sum() const {
  return data_case() == kSum;
}
inline void Metric::set_has_sum() {
  _impl_._oneof_case_[0] = kSum;
}
inline void Metric::clear_sum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kSum) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.sum_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::release_sum() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.sum)
  if (data_case() == kSum) {
    clear_has_data();
    auto* temp = _impl_.data_.sum_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Sum& Metric::_internal_sum() const {
  return data_case() == kSum ? *_impl_.data_.sum_ : reinterpret_cast<::opentelemetry::proto::metrics::v1::Sum&>(::opentelemetry::proto::metrics::v1::_Sum_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Sum& Metric::sum() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.sum)
  return _internal_sum();
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::unsafe_arena_release_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.sum)
  if (data_case() == kSum) {
    clear_has_data();
    auto* temp = _impl_.data_.sum_;
    _impl_.data_.sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_sum();
    _impl_.data_.sum_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.sum)
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::_internal_mutable_sum() {
  if (data_case() != kSum) {
    clear_data();
    set_has_sum();
    _impl_.data_.sum_ =
        ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::Sum>(GetArena());
  }
  return _impl_.data_.sum_;
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::mutable_sum() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opentelemetry::proto::metrics::v1::Sum* _msg = _internal_mutable_sum();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.sum)
  return _msg;
}

// .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
inline bool Metric::has_histogram() const {
  return data_case() == kHistogram;
}
inline bool Metric::_internal_has_histogram() const {
  return data_case() == kHistogram;
}
inline void Metric::set_has_histogram() {
  _impl_._oneof_case_[0] = kHistogram;
}
inline void Metric::clear_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::release_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.histogram)
  if (data_case() == kHistogram) {
    clear_has_data();
    auto* temp = _impl_.data_.histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Histogram& Metric::_internal_histogram() const {
  return data_case() == kHistogram ? *_impl_.data_.histogram_ : reinterpret_cast<::opentelemetry::proto::metrics::v1::Histogram&>(::opentelemetry::proto::metrics::v1::_Histogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Histogram& Metric::histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.histogram)
  return _internal_histogram();
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::unsafe_arena_release_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.histogram)
  if (data_case() == kHistogram) {
    clear_has_data();
    auto* temp = _impl_.data_.histogram_;
    _impl_.data_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_histogram();
    _impl_.data_.histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.histogram)
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::_internal_mutable_histogram() {
  if (data_case() != kHistogram) {
    clear_data();
    set_has_histogram();
    _impl_.data_.histogram_ =
        ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::Histogram>(GetArena());
  }
  return _impl_.data_.histogram_;
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::mutable_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opentelemetry::proto::metrics::v1::Histogram* _msg = _internal_mutable_histogram();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.histogram)
  return _msg;
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
inline bool Metric::has_exponential_histogram() const {
  return data_case() == kExponentialHistogram;
}
inline bool Metric::_internal_has_exponential_histogram() const {
  return data_case() == kExponentialHistogram;
}
inline void Metric::set_has_exponential_histogram() {
  _impl_._oneof_case_[0] = kExponentialHistogram;
}
inline void Metric::clear_exponential_histogram() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kExponentialHistogram) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.exponential_histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::release_exponential_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  if (data_case() == kExponentialHistogram) {
    clear_has_data();
    auto* temp = _impl_.data_.exponential_histogram_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.exponential_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& Metric::_internal_exponential_histogram() const {
  return data_case() == kExponentialHistogram ? *_impl_.data_.exponential_histogram_ : reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogram&>(::opentelemetry::proto::metrics::v1::_ExponentialHistogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& Metric::exponential_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  return _internal_exponential_histogram();
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::unsafe_arena_release_exponential_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  if (data_case() == kExponentialHistogram) {
    clear_has_data();
    auto* temp = _impl_.data_.exponential_histogram_;
    _impl_.data_.exponential_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_exponential_histogram();
    _impl_.data_.exponential_histogram_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::_internal_mutable_exponential_histogram() {
  if (data_case() != kExponentialHistogram) {
    clear_data();
    set_has_exponential_histogram();
    _impl_.data_.exponential_histogram_ =
        ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogram>(GetArena());
  }
  return _impl_.data_.exponential_histogram_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::mutable_exponential_histogram() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* _msg = _internal_mutable_exponential_histogram();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  return _msg;
}

// .opentelemetry.proto.metrics.v1.Summary summary = 11;
inline bool Metric::has_summary() const {
  return data_case() == kSummary;
}
inline bool Metric::_internal_has_summary() const {
  return data_case() == kSummary;
}
inline void Metric::set_has_summary() {
  _impl_._oneof_case_[0] = kSummary;
}
inline void Metric::clear_summary() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kSummary) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.summary_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::release_summary() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.summary)
  if (data_case() == kSummary) {
    clear_has_data();
    auto* temp = _impl_.data_.summary_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Summary& Metric::_internal_summary() const {
  return data_case() == kSummary ? *_impl_.data_.summary_ : reinterpret_cast<::opentelemetry::proto::metrics::v1::Summary&>(::opentelemetry::proto::metrics::v1::_Summary_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Summary& Metric::summary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.summary)
  return _internal_summary();
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.summary)
  if (data_case() == kSummary) {
    clear_has_data();
    auto* temp = _impl_.data_.summary_;
    _impl_.data_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_summary();
    _impl_.data_.summary_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.summary)
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::_internal_mutable_summary() {
  if (data_case() != kSummary) {
    clear_data();
    set_has_summary();
    _impl_.data_.summary_ =
        ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::Summary>(GetArena());
  }
  return _impl_.data_.summary_;
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opentelemetry::proto::metrics::v1::Summary* _msg = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.summary)
  return _msg;
}

// repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
inline int Metric::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int Metric::metadata_size() const {
  return _internal_metadata_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Metric::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* Metric::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Metric.metadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_metadata();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Metric::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.metadata)
  return _internal_metadata().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Metric::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Metric.metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& Metric::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Metric.metadata)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Metric::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Metric::_internal_mutable_metadata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.metadata_;
}

inline bool Metric::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Metric::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline Metric::DataCase Metric::data_case() const {
  return Metric::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Gauge

// repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
inline int Gauge::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int Gauge::data_points_size() const {
  return _internal_data_points_size();
}
inline void Gauge::clear_data_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Gauge::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* Gauge::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Gauge.data_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_points();
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Gauge::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _internal_data_points().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Gauge::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& Gauge::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>&
Gauge::_internal_data_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>*
Gauge::_internal_mutable_data_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_points_;
}

// -------------------------------------------------------------------

// Sum

// repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
inline int Sum::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int Sum::data_points_size() const {
  return _internal_data_points_size();
}
inline void Sum::clear_data_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Sum::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>* Sum::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Sum.data_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_points();
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Sum::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _internal_data_points().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Sum::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>& Sum::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>&
Sum::_internal_data_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::NumberDataPoint>*
Sum::_internal_mutable_data_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void Sum::clear_aggregation_temporality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Sum::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void Sum::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Sum.aggregation_temporality)
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Sum::_internal_aggregation_temporality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(_impl_.aggregation_temporality_);
}
inline void Sum::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = value;
}

// bool is_monotonic = 3;
inline void Sum::clear_is_monotonic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_monotonic_ = false;
}
inline bool Sum::is_monotonic() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.is_monotonic)
  return _internal_is_monotonic();
}
inline void Sum::set_is_monotonic(bool value) {
  _internal_set_is_monotonic(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Sum.is_monotonic)
}
inline bool Sum::_internal_is_monotonic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_monotonic_;
}
inline void Sum::_internal_set_is_monotonic(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_monotonic_ = value;
}

// -------------------------------------------------------------------

// Histogram

// repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
inline int Histogram::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int Histogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void Histogram::clear_data_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Histogram::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>* Histogram::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Histogram.data_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_points();
}
inline const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& Histogram::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _internal_data_points().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Histogram::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>& Histogram::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>&
Histogram::_internal_data_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::HistogramDataPoint>*
Histogram::_internal_mutable_data_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void Histogram::clear_aggregation_temporality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Histogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Histogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void Histogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Histogram.aggregation_temporality)
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Histogram::_internal_aggregation_temporality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(_impl_.aggregation_temporality_);
}
inline void Histogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = value;
}

// -------------------------------------------------------------------

// ExponentialHistogram

// repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
inline int ExponentialHistogram::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int ExponentialHistogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void ExponentialHistogram::clear_data_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* ExponentialHistogram::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>* ExponentialHistogram::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_points();
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& ExponentialHistogram::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _internal_data_points().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* ExponentialHistogram::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>& ExponentialHistogram::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>&
ExponentialHistogram::_internal_data_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>*
ExponentialHistogram::_internal_mutable_data_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void ExponentialHistogram::clear_aggregation_temporality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality ExponentialHistogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void ExponentialHistogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogram.aggregation_temporality)
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality ExponentialHistogram::_internal_aggregation_temporality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(_impl_.aggregation_temporality_);
}
inline void ExponentialHistogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = value;
}

// -------------------------------------------------------------------

// Summary

// repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
inline int Summary::_internal_data_points_size() const {
  return _internal_data_points().size();
}
inline int Summary::data_points_size() const {
  return _internal_data_points_size();
}
inline void Summary::clear_data_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Summary::mutable_data_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _internal_mutable_data_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>* Summary::mutable_data_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Summary.data_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_points();
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& Summary::data_points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _internal_data_points().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Summary::add_data_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* _add = _internal_mutable_data_points()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>& Summary::data_points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _internal_data_points();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>&
Summary::_internal_data_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_points_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint>*
Summary::_internal_mutable_data_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_points_;
}

// -------------------------------------------------------------------

// NumberDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
inline int NumberDataPoint::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int NumberDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* NumberDataPoint::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* NumberDataPoint::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& NumberDataPoint::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* NumberDataPoint::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& NumberDataPoint::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
NumberDataPoint::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
NumberDataPoint::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// fixed64 start_time_unix_nano = 2;
inline void NumberDataPoint::clear_start_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t NumberDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void NumberDataPoint::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.start_time_unix_nano)
}
inline ::uint64_t NumberDataPoint::_internal_start_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_unix_nano_;
}
inline void NumberDataPoint::_internal_set_start_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 time_unix_nano = 3;
inline void NumberDataPoint::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t NumberDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void NumberDataPoint::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.time_unix_nano)
}
inline ::uint64_t NumberDataPoint::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void NumberDataPoint::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// double as_double = 4;
inline bool NumberDataPoint::has_as_double() const {
  return value_case() == kAsDouble;
}
inline void NumberDataPoint::set_has_as_double() {
  _impl_._oneof_case_[0] = kAsDouble;
}
inline void NumberDataPoint::clear_as_double() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kAsDouble) {
    _impl_.value_.as_double_ = 0;
    clear_has_value();
  }
}
inline double NumberDataPoint::as_double() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.as_double)
  return _internal_as_double();
}
inline void NumberDataPoint::set_as_double(double value) {
  if (value_case() != kAsDouble) {
    clear_value();
    set_has_as_double();
  }
  _impl_.value_.as_double_ = value;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.as_double)
}
inline double NumberDataPoint::_internal_as_double() const {
  if (value_case() == kAsDouble) {
    return _impl_.value_.as_double_;
  }
  return 0;
}

// sfixed64 as_int = 6;
inline bool NumberDataPoint::has_as_int() const {
  return value_case() == kAsInt;
}
inline void NumberDataPoint::set_has_as_int() {
  _impl_._oneof_case_[0] = kAsInt;
}
inline void NumberDataPoint::clear_as_int() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kAsInt) {
    _impl_.value_.as_int_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t NumberDataPoint::as_int() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.as_int)
  return _internal_as_int();
}
inline void NumberDataPoint::set_as_int(::int64_t value) {
  if (value_case() != kAsInt) {
    clear_value();
    set_has_as_int();
  }
  _impl_.value_.as_int_ = value;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.as_int)
}
inline ::int64_t NumberDataPoint::_internal_as_int() const {
  if (value_case() == kAsInt) {
    return _impl_.value_.as_int_;
  }
  return ::int64_t{0};
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
inline int NumberDataPoint::_internal_exemplars_size() const {
  return _internal_exemplars().size();
}
inline int NumberDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void NumberDataPoint::clear_exemplars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* NumberDataPoint::mutable_exemplars(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _internal_mutable_exemplars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* NumberDataPoint::mutable_exemplars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exemplars();
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& NumberDataPoint::exemplars(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _internal_exemplars().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* NumberDataPoint::add_exemplars() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::Exemplar* _add = _internal_mutable_exemplars()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& NumberDataPoint::exemplars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _internal_exemplars();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>&
NumberDataPoint::_internal_exemplars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exemplars_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>*
NumberDataPoint::_internal_mutable_exemplars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exemplars_;
}

// uint32 flags = 8;
inline void NumberDataPoint::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t NumberDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.flags)
  return _internal_flags();
}
inline void NumberDataPoint::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.flags)
}
inline ::uint32_t NumberDataPoint::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void NumberDataPoint::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = value;
}

inline bool NumberDataPoint::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void NumberDataPoint::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline NumberDataPoint::ValueCase NumberDataPoint::value_case() const {
  return NumberDataPoint::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HistogramDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
inline int HistogramDataPoint::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int HistogramDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* HistogramDataPoint::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* HistogramDataPoint::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& HistogramDataPoint::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* HistogramDataPoint::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& HistogramDataPoint::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
HistogramDataPoint::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
HistogramDataPoint::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// fixed64 start_time_unix_nano = 2;
inline void HistogramDataPoint::clear_start_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t HistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void HistogramDataPoint::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.start_time_unix_nano)
}
inline ::uint64_t HistogramDataPoint::_internal_start_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_unix_nano_;
}
inline void HistogramDataPoint::_internal_set_start_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 time_unix_nano = 3;
inline void HistogramDataPoint::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t HistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void HistogramDataPoint::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.time_unix_nano)
}
inline ::uint64_t HistogramDataPoint::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void HistogramDataPoint::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// fixed64 count = 4;
inline void HistogramDataPoint::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t HistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.count)
  return _internal_count();
}
inline void HistogramDataPoint::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.count)
}
inline ::uint64_t HistogramDataPoint::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void HistogramDataPoint::_internal_set_count(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = value;
}

// optional double sum = 5;
inline bool HistogramDataPoint::has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HistogramDataPoint::clear_sum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double HistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.sum)
  return _internal_sum();
}
inline void HistogramDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.sum)
}
inline double HistogramDataPoint::_internal_sum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sum_;
}
inline void HistogramDataPoint::_internal_set_sum(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = value;
}

// repeated fixed64 bucket_counts = 6;
inline int HistogramDataPoint::_internal_bucket_counts_size() const {
  return _internal_bucket_counts().size();
}
inline int HistogramDataPoint::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void HistogramDataPoint::clear_bucket_counts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bucket_counts_.Clear();
}
inline ::uint64_t HistogramDataPoint::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  return _internal_bucket_counts().Get(index);
}
inline void HistogramDataPoint::set_bucket_counts(int index, ::uint64_t value) {
  _internal_mutable_bucket_counts()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
}
inline void HistogramDataPoint::add_bucket_counts(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bucket_counts()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& HistogramDataPoint::bucket_counts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  return _internal_bucket_counts();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* HistogramDataPoint::mutable_bucket_counts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bucket_counts();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
HistogramDataPoint::_internal_bucket_counts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bucket_counts_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* HistogramDataPoint::_internal_mutable_bucket_counts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bucket_counts_;
}

// repeated double explicit_bounds = 7;
inline int HistogramDataPoint::_internal_explicit_bounds_size() const {
  return _internal_explicit_bounds().size();
}
inline int HistogramDataPoint::explicit_bounds_size() const {
  return _internal_explicit_bounds_size();
}
inline void HistogramDataPoint::clear_explicit_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explicit_bounds_.Clear();
}
inline double HistogramDataPoint::explicit_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds().Get(index);
}
inline void HistogramDataPoint::set_explicit_bounds(int index, double value) {
  _internal_mutable_explicit_bounds()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
}
inline void HistogramDataPoint::add_explicit_bounds(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_explicit_bounds()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
}
inline const ::google::protobuf::RepeatedField<double>& HistogramDataPoint::explicit_bounds() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds();
}
inline ::google::protobuf::RepeatedField<double>* HistogramDataPoint::mutable_explicit_bounds()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_explicit_bounds();
}
inline const ::google::protobuf::RepeatedField<double>&
HistogramDataPoint::_internal_explicit_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.explicit_bounds_;
}
inline ::google::protobuf::RepeatedField<double>* HistogramDataPoint::_internal_mutable_explicit_bounds() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.explicit_bounds_;
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
inline int HistogramDataPoint::_internal_exemplars_size() const {
  return _internal_exemplars().size();
}
inline int HistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void HistogramDataPoint::clear_exemplars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* HistogramDataPoint::mutable_exemplars(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _internal_mutable_exemplars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* HistogramDataPoint::mutable_exemplars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exemplars();
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& HistogramDataPoint::exemplars(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _internal_exemplars().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* HistogramDataPoint::add_exemplars() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::Exemplar* _add = _internal_mutable_exemplars()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& HistogramDataPoint::exemplars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _internal_exemplars();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>&
HistogramDataPoint::_internal_exemplars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exemplars_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>*
HistogramDataPoint::_internal_mutable_exemplars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exemplars_;
}

// uint32 flags = 10;
inline void HistogramDataPoint::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t HistogramDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.flags)
  return _internal_flags();
}
inline void HistogramDataPoint::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.flags)
}
inline ::uint32_t HistogramDataPoint::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void HistogramDataPoint::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = value;
}

// optional double min = 11;
inline bool HistogramDataPoint::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HistogramDataPoint::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double HistogramDataPoint::min() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.min)
  return _internal_min();
}
inline void HistogramDataPoint::set_min(double value) {
  _internal_set_min(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.min)
}
inline double HistogramDataPoint::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void HistogramDataPoint::_internal_set_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = value;
}

// optional double max = 12;
inline bool HistogramDataPoint::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HistogramDataPoint::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double HistogramDataPoint::max() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.max)
  return _internal_max();
}
inline void HistogramDataPoint::set_max(double value) {
  _internal_set_max(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.max)
}
inline double HistogramDataPoint::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void HistogramDataPoint::_internal_set_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// ExponentialHistogramDataPoint_Buckets

// sint32 offset = 1;
inline void ExponentialHistogramDataPoint_Buckets::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0;
}
inline ::int32_t ExponentialHistogramDataPoint_Buckets::offset() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.offset)
  return _internal_offset();
}
inline void ExponentialHistogramDataPoint_Buckets::set_offset(::int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.offset)
}
inline ::int32_t ExponentialHistogramDataPoint_Buckets::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void ExponentialHistogramDataPoint_Buckets::_internal_set_offset(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = value;
}

// repeated uint64 bucket_counts = 2;
inline int ExponentialHistogramDataPoint_Buckets::_internal_bucket_counts_size() const {
  return _internal_bucket_counts().size();
}
inline int ExponentialHistogramDataPoint_Buckets::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void ExponentialHistogramDataPoint_Buckets::clear_bucket_counts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bucket_counts_.Clear();
}
inline ::uint64_t ExponentialHistogramDataPoint_Buckets::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  return _internal_bucket_counts().Get(index);
}
inline void ExponentialHistogramDataPoint_Buckets::set_bucket_counts(int index, ::uint64_t value) {
  _internal_mutable_bucket_counts()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
}
inline void ExponentialHistogramDataPoint_Buckets::add_bucket_counts(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bucket_counts()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& ExponentialHistogramDataPoint_Buckets::bucket_counts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  return _internal_bucket_counts();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* ExponentialHistogramDataPoint_Buckets::mutable_bucket_counts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bucket_counts();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
ExponentialHistogramDataPoint_Buckets::_internal_bucket_counts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bucket_counts_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* ExponentialHistogramDataPoint_Buckets::_internal_mutable_bucket_counts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bucket_counts_;
}

// -------------------------------------------------------------------

// ExponentialHistogramDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
inline int ExponentialHistogramDataPoint::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int ExponentialHistogramDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* ExponentialHistogramDataPoint::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* ExponentialHistogramDataPoint::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& ExponentialHistogramDataPoint::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* ExponentialHistogramDataPoint::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& ExponentialHistogramDataPoint::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
ExponentialHistogramDataPoint::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
ExponentialHistogramDataPoint::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// fixed64 start_time_unix_nano = 2;
inline void ExponentialHistogramDataPoint::clear_start_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t ExponentialHistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void ExponentialHistogramDataPoint::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.start_time_unix_nano)
}
inline ::uint64_t ExponentialHistogramDataPoint::_internal_start_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_unix_nano_;
}
inline void ExponentialHistogramDataPoint::_internal_set_start_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 time_unix_nano = 3;
inline void ExponentialHistogramDataPoint::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t ExponentialHistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void ExponentialHistogramDataPoint::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.time_unix_nano)
}
inline ::uint64_t ExponentialHistogramDataPoint::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void ExponentialHistogramDataPoint::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// fixed64 count = 4;
inline void ExponentialHistogramDataPoint::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t ExponentialHistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.count)
  return _internal_count();
}
inline void ExponentialHistogramDataPoint::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.count)
}
inline ::uint64_t ExponentialHistogramDataPoint::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void ExponentialHistogramDataPoint::_internal_set_count(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = value;
}

// optional double sum = 5;
inline bool ExponentialHistogramDataPoint::has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ExponentialHistogramDataPoint::clear_sum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ExponentialHistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.sum)
  return _internal_sum();
}
inline void ExponentialHistogramDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.sum)
}
inline double ExponentialHistogramDataPoint::_internal_sum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sum_;
}
inline void ExponentialHistogramDataPoint::_internal_set_sum(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = value;
}

// sint32 scale = 6;
inline void ExponentialHistogramDataPoint::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 0;
}
inline ::int32_t ExponentialHistogramDataPoint::scale() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.scale)
  return _internal_scale();
}
inline void ExponentialHistogramDataPoint::set_scale(::int32_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.scale)
}
inline ::int32_t ExponentialHistogramDataPoint::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void ExponentialHistogramDataPoint::_internal_set_scale(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = value;
}

// fixed64 zero_count = 7;
inline void ExponentialHistogramDataPoint::clear_zero_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zero_count_ = ::uint64_t{0u};
}
inline ::uint64_t ExponentialHistogramDataPoint::zero_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_count)
  return _internal_zero_count();
}
inline void ExponentialHistogramDataPoint::set_zero_count(::uint64_t value) {
  _internal_set_zero_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_count)
}
inline ::uint64_t ExponentialHistogramDataPoint::_internal_zero_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zero_count_;
}
inline void ExponentialHistogramDataPoint::_internal_set_zero_count(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zero_count_ = value;
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
inline bool ExponentialHistogramDataPoint::has_positive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.positive_ != nullptr);
  return value;
}
inline void ExponentialHistogramDataPoint::clear_positive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.positive_ != nullptr) _impl_.positive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::_internal_positive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* p = _impl_.positive_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&>(::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::positive() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
  return _internal_positive();
}
inline void ExponentialHistogramDataPoint::unsafe_arena_set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.positive_);
  }
  _impl_.positive_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::release_positive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* released = _impl_.positive_;
  _impl_.positive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::unsafe_arena_release_positive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = _impl_.positive_;
  _impl_.positive_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::_internal_mutable_positive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.positive_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(GetArena());
    _impl_.positive_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(p);
  }
  return _impl_.positive_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::mutable_positive() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _msg = _internal_mutable_positive();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
  return _msg;
}
inline void ExponentialHistogramDataPoint::set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.positive_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.positive_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
inline bool ExponentialHistogramDataPoint::has_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.negative_ != nullptr);
  return value;
}
inline void ExponentialHistogramDataPoint::clear_negative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.negative_ != nullptr) _impl_.negative_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::_internal_negative() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* p = _impl_.negative_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&>(::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::negative() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
  return _internal_negative();
}
inline void ExponentialHistogramDataPoint::unsafe_arena_set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.negative_);
  }
  _impl_.negative_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::release_negative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* released = _impl_.negative_;
  _impl_.negative_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::unsafe_arena_release_negative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = _impl_.negative_;
  _impl_.negative_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::_internal_mutable_negative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.negative_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(GetArena());
    _impl_.negative_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(p);
  }
  return _impl_.negative_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::mutable_negative() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _msg = _internal_mutable_negative();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
  return _msg;
}
inline void ExponentialHistogramDataPoint::set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.negative_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.negative_ = reinterpret_cast<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
}

// uint32 flags = 10;
inline void ExponentialHistogramDataPoint::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t ExponentialHistogramDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.flags)
  return _internal_flags();
}
inline void ExponentialHistogramDataPoint::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.flags)
}
inline ::uint32_t ExponentialHistogramDataPoint::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void ExponentialHistogramDataPoint::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = value;
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
inline int ExponentialHistogramDataPoint::_internal_exemplars_size() const {
  return _internal_exemplars().size();
}
inline int ExponentialHistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void ExponentialHistogramDataPoint::clear_exemplars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* ExponentialHistogramDataPoint::mutable_exemplars(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _internal_mutable_exemplars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>* ExponentialHistogramDataPoint::mutable_exemplars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exemplars();
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& ExponentialHistogramDataPoint::exemplars(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _internal_exemplars().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* ExponentialHistogramDataPoint::add_exemplars() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::Exemplar* _add = _internal_mutable_exemplars()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>& ExponentialHistogramDataPoint::exemplars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _internal_exemplars();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>&
ExponentialHistogramDataPoint::_internal_exemplars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exemplars_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::Exemplar>*
ExponentialHistogramDataPoint::_internal_mutable_exemplars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exemplars_;
}

// optional double min = 12;
inline bool ExponentialHistogramDataPoint::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ExponentialHistogramDataPoint::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ExponentialHistogramDataPoint::min() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.min)
  return _internal_min();
}
inline void ExponentialHistogramDataPoint::set_min(double value) {
  _internal_set_min(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.min)
}
inline double ExponentialHistogramDataPoint::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void ExponentialHistogramDataPoint::_internal_set_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = value;
}

// optional double max = 13;
inline bool ExponentialHistogramDataPoint::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ExponentialHistogramDataPoint::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ExponentialHistogramDataPoint::max() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.max)
  return _internal_max();
}
inline void ExponentialHistogramDataPoint::set_max(double value) {
  _internal_set_max(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.max)
}
inline double ExponentialHistogramDataPoint::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void ExponentialHistogramDataPoint::_internal_set_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = value;
}

// double zero_threshold = 14;
inline void ExponentialHistogramDataPoint::clear_zero_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zero_threshold_ = 0;
}
inline double ExponentialHistogramDataPoint::zero_threshold() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_threshold)
  return _internal_zero_threshold();
}
inline void ExponentialHistogramDataPoint::set_zero_threshold(double value) {
  _internal_set_zero_threshold(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_threshold)
}
inline double ExponentialHistogramDataPoint::_internal_zero_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zero_threshold_;
}
inline void ExponentialHistogramDataPoint::_internal_set_zero_threshold(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zero_threshold_ = value;
}

// -------------------------------------------------------------------

// SummaryDataPoint_ValueAtQuantile

// double quantile = 1;
inline void SummaryDataPoint_ValueAtQuantile::clear_quantile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quantile_ = 0;
}
inline double SummaryDataPoint_ValueAtQuantile::quantile() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.quantile)
  return _internal_quantile();
}
inline void SummaryDataPoint_ValueAtQuantile::set_quantile(double value) {
  _internal_set_quantile(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.quantile)
}
inline double SummaryDataPoint_ValueAtQuantile::_internal_quantile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quantile_;
}
inline void SummaryDataPoint_ValueAtQuantile::_internal_set_quantile(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quantile_ = value;
}

// double value = 2;
inline void SummaryDataPoint_ValueAtQuantile::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline double SummaryDataPoint_ValueAtQuantile::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.value)
  return _internal_value();
}
inline void SummaryDataPoint_ValueAtQuantile::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.value)
}
inline double SummaryDataPoint_ValueAtQuantile::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void SummaryDataPoint_ValueAtQuantile::_internal_set_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SummaryDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
inline int SummaryDataPoint::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int SummaryDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* SummaryDataPoint::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* SummaryDataPoint::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& SummaryDataPoint::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* SummaryDataPoint::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& SummaryDataPoint::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
SummaryDataPoint::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
SummaryDataPoint::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// fixed64 start_time_unix_nano = 2;
inline void SummaryDataPoint::clear_start_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t SummaryDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void SummaryDataPoint::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.start_time_unix_nano)
}
inline ::uint64_t SummaryDataPoint::_internal_start_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_unix_nano_;
}
inline void SummaryDataPoint::_internal_set_start_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 time_unix_nano = 3;
inline void SummaryDataPoint::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t SummaryDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void SummaryDataPoint::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.time_unix_nano)
}
inline ::uint64_t SummaryDataPoint::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void SummaryDataPoint::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// fixed64 count = 4;
inline void SummaryDataPoint::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t SummaryDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.count)
  return _internal_count();
}
inline void SummaryDataPoint::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.count)
}
inline ::uint64_t SummaryDataPoint::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void SummaryDataPoint::_internal_set_count(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = value;
}

// double sum = 5;
inline void SummaryDataPoint::clear_sum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = 0;
}
inline double SummaryDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.sum)
  return _internal_sum();
}
inline void SummaryDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.sum)
}
inline double SummaryDataPoint::_internal_sum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sum_;
}
inline void SummaryDataPoint::_internal_set_sum(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sum_ = value;
}

// repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
inline int SummaryDataPoint::_internal_quantile_values_size() const {
  return _internal_quantile_values().size();
}
inline int SummaryDataPoint::quantile_values_size() const {
  return _internal_quantile_values_size();
}
inline void SummaryDataPoint::clear_quantile_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quantile_values_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* SummaryDataPoint::mutable_quantile_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _internal_mutable_quantile_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>* SummaryDataPoint::mutable_quantile_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_quantile_values();
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& SummaryDataPoint::quantile_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _internal_quantile_values().Get(index);
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* SummaryDataPoint::add_quantile_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* _add = _internal_mutable_quantile_values()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>& SummaryDataPoint::quantile_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _internal_quantile_values();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>&
SummaryDataPoint::_internal_quantile_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quantile_values_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>*
SummaryDataPoint::_internal_mutable_quantile_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.quantile_values_;
}

// uint32 flags = 8;
inline void SummaryDataPoint::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0u;
}
inline ::uint32_t SummaryDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.flags)
  return _internal_flags();
}
inline void SummaryDataPoint::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.flags)
}
inline ::uint32_t SummaryDataPoint::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flags_;
}
inline void SummaryDataPoint::_internal_set_flags(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Exemplar

// repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
inline int Exemplar::_internal_filtered_attributes_size() const {
  return _internal_filtered_attributes().size();
}
inline int Exemplar::filtered_attributes_size() const {
  return _internal_filtered_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Exemplar::mutable_filtered_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _internal_mutable_filtered_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* Exemplar::mutable_filtered_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_filtered_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Exemplar::filtered_attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _internal_filtered_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Exemplar::add_filtered_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_filtered_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& Exemplar::filtered_attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _internal_filtered_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Exemplar::_internal_filtered_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filtered_attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Exemplar::_internal_mutable_filtered_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.filtered_attributes_;
}

// fixed64 time_unix_nano = 2;
inline void Exemplar::clear_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t Exemplar::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void Exemplar::set_time_unix_nano(::uint64_t value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.time_unix_nano)
}
inline ::uint64_t Exemplar::_internal_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_unix_nano_;
}
inline void Exemplar::_internal_set_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_unix_nano_ = value;
}

// double as_double = 3;
inline bool Exemplar::has_as_double() const {
  return value_case() == kAsDouble;
}
inline void Exemplar::set_has_as_double() {
  _impl_._oneof_case_[0] = kAsDouble;
}
inline void Exemplar::clear_as_double() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kAsDouble) {
    _impl_.value_.as_double_ = 0;
    clear_has_value();
  }
}
inline double Exemplar::as_double() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.as_double)
  return _internal_as_double();
}
inline void Exemplar::set_as_double(double value) {
  if (value_case() != kAsDouble) {
    clear_value();
    set_has_as_double();
  }
  _impl_.value_.as_double_ = value;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.as_double)
}
inline double Exemplar::_internal_as_double() const {
  if (value_case() == kAsDouble) {
    return _impl_.value_.as_double_;
  }
  return 0;
}

// sfixed64 as_int = 6;
inline bool Exemplar::has_as_int() const {
  return value_case() == kAsInt;
}
inline void Exemplar::set_has_as_int() {
  _impl_._oneof_case_[0] = kAsInt;
}
inline void Exemplar::clear_as_int() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kAsInt) {
    _impl_.value_.as_int_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t Exemplar::as_int() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.as_int)
  return _internal_as_int();
}
inline void Exemplar::set_as_int(::int64_t value) {
  if (value_case() != kAsInt) {
    clear_value();
    set_has_as_int();
  }
  _impl_.value_.as_int_ = value;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.as_int)
}
inline ::int64_t Exemplar::_internal_as_int() const {
  if (value_case() == kAsInt) {
    return _impl_.value_.as_int_;
  }
  return ::int64_t{0};
}

// bytes span_id = 4;
inline void Exemplar::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& Exemplar::span_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return _internal_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Exemplar::set_span_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}
inline std::string* Exemplar::mutable_span_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return _s;
}
inline const std::string& Exemplar::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Get();
}
inline void Exemplar::_internal_set_span_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.Set(value, GetArena());
}
inline std::string* Exemplar::_internal_mutable_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Mutable( GetArena());
}
inline std::string* Exemplar::release_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return _impl_.span_id_.Release();
}
inline void Exemplar::set_allocated_span_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_id_.IsDefault()) {
          _impl_.span_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}

// bytes trace_id = 5;
inline void Exemplar::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& Exemplar::trace_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Exemplar::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}
inline std::string* Exemplar::mutable_trace_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return _s;
}
inline const std::string& Exemplar::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Get();
}
inline void Exemplar::_internal_set_trace_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.Set(value, GetArena());
}
inline std::string* Exemplar::_internal_mutable_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Mutable( GetArena());
}
inline std::string* Exemplar::release_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return _impl_.trace_id_.Release();
}
inline void Exemplar::set_allocated_trace_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}

inline bool Exemplar::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Exemplar::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Exemplar::ValueCase Exemplar::value_case() const {
  return Exemplar::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::opentelemetry::proto::metrics::v1::AggregationTemporality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::metrics::v1::AggregationTemporality>() {
  return ::opentelemetry::proto::metrics::v1::AggregationTemporality_descriptor();
}
template <>
struct is_proto_enum<::opentelemetry::proto::metrics::v1::DataPointFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::metrics::v1::DataPointFlags>() {
  return ::opentelemetry::proto::metrics::v1::DataPointFlags_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_2epb_2eh
