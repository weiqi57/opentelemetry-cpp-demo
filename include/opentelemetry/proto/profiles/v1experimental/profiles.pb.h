// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1experimental/profiles.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
#include "opentelemetry/proto/profiles/v1experimental/pprofextended.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto;
namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1experimental {
class ProfileContainer;
struct ProfileContainerDefaultTypeInternal;
extern ProfileContainerDefaultTypeInternal _ProfileContainer_default_instance_;
class ProfilesData;
struct ProfilesDataDefaultTypeInternal;
extern ProfilesDataDefaultTypeInternal _ProfilesData_default_instance_;
class ResourceProfiles;
struct ResourceProfilesDefaultTypeInternal;
extern ResourceProfilesDefaultTypeInternal _ResourceProfiles_default_instance_;
class ScopeProfiles;
struct ScopeProfilesDefaultTypeInternal;
extern ScopeProfilesDefaultTypeInternal _ScopeProfiles_default_instance_;
}  // namespace v1experimental
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1experimental {

// ===================================================================


// -------------------------------------------------------------------

class ProfileContainer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1experimental.ProfileContainer) */ {
 public:
  inline ProfileContainer() : ProfileContainer(nullptr) {}
  ~ProfileContainer() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfileContainer(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProfileContainer(const ProfileContainer& from) : ProfileContainer(nullptr, from) {}
  inline ProfileContainer(ProfileContainer&& from) noexcept
      : ProfileContainer(nullptr, std::move(from)) {}
  inline ProfileContainer& operator=(const ProfileContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileContainer& operator=(ProfileContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfileContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileContainer* internal_default_instance() {
    return reinterpret_cast<const ProfileContainer*>(
        &_ProfileContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ProfileContainer& a, ProfileContainer& b) { a.Swap(&b); }
  inline void Swap(ProfileContainer* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileContainer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProfileContainer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfileContainer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfileContainer& from) { ProfileContainer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProfileContainer* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1experimental.ProfileContainer"; }

 protected:
  explicit ProfileContainer(::google::protobuf::Arena* arena);
  ProfileContainer(::google::protobuf::Arena* arena, const ProfileContainer& from);
  ProfileContainer(::google::protobuf::Arena* arena, ProfileContainer&& from) noexcept
      : ProfileContainer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 4,
    kProfileIdFieldNumber = 1,
    kOriginalPayloadFormatFieldNumber = 6,
    kOriginalPayloadFieldNumber = 7,
    kProfileFieldNumber = 8,
    kStartTimeUnixNanoFieldNumber = 2,
    kEndTimeUnixNanoFieldNumber = 3,
    kDroppedAttributesCountFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // bytes profile_id = 1;
  void clear_profile_id() ;
  const std::string& profile_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile_id(Arg_&& arg, Args_... args);
  std::string* mutable_profile_id();
  PROTOBUF_NODISCARD std::string* release_profile_id();
  void set_allocated_profile_id(std::string* value);

  private:
  const std::string& _internal_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_id(
      const std::string& value);
  std::string* _internal_mutable_profile_id();

  public:
  // string original_payload_format = 6;
  void clear_original_payload_format() ;
  const std::string& original_payload_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_payload_format(Arg_&& arg, Args_... args);
  std::string* mutable_original_payload_format();
  PROTOBUF_NODISCARD std::string* release_original_payload_format();
  void set_allocated_original_payload_format(std::string* value);

  private:
  const std::string& _internal_original_payload_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_payload_format(
      const std::string& value);
  std::string* _internal_mutable_original_payload_format();

  public:
  // bytes original_payload = 7;
  void clear_original_payload() ;
  const std::string& original_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_payload(Arg_&& arg, Args_... args);
  std::string* mutable_original_payload();
  PROTOBUF_NODISCARD std::string* release_original_payload();
  void set_allocated_original_payload(std::string* value);

  private:
  const std::string& _internal_original_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_payload(
      const std::string& value);
  std::string* _internal_mutable_original_payload();

  public:
  // .opentelemetry.proto.profiles.v1experimental.Profile profile = 8;
  bool has_profile() const;
  void clear_profile() ;
  const ::opentelemetry::proto::profiles::v1experimental::Profile& profile() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::profiles::v1experimental::Profile* release_profile();
  ::opentelemetry::proto::profiles::v1experimental::Profile* mutable_profile();
  void set_allocated_profile(::opentelemetry::proto::profiles::v1experimental::Profile* value);
  void unsafe_arena_set_allocated_profile(::opentelemetry::proto::profiles::v1experimental::Profile* value);
  ::opentelemetry::proto::profiles::v1experimental::Profile* unsafe_arena_release_profile();

  private:
  const ::opentelemetry::proto::profiles::v1experimental::Profile& _internal_profile() const;
  ::opentelemetry::proto::profiles::v1experimental::Profile* _internal_mutable_profile();

  public:
  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano() ;
  ::uint64_t start_time_unix_nano() const;
  void set_start_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::uint64_t value);

  public:
  // fixed64 end_time_unix_nano = 3;
  void clear_end_time_unix_nano() ;
  ::uint64_t end_time_unix_nano() const;
  void set_end_time_unix_nano(::uint64_t value);

  private:
  ::uint64_t _internal_end_time_unix_nano() const;
  void _internal_set_end_time_unix_nano(::uint64_t value);

  public:
  // uint32 dropped_attributes_count = 5;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1experimental.ProfileContainer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      100, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::google::protobuf::internal::ArenaStringPtr profile_id_;
    ::google::protobuf::internal::ArenaStringPtr original_payload_format_;
    ::google::protobuf::internal::ArenaStringPtr original_payload_;
    ::opentelemetry::proto::profiles::v1experimental::Profile* profile_;
    ::uint64_t start_time_unix_nano_;
    ::uint64_t end_time_unix_nano_;
    ::uint32_t dropped_attributes_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ScopeProfiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1experimental.ScopeProfiles) */ {
 public:
  inline ScopeProfiles() : ScopeProfiles(nullptr) {}
  ~ScopeProfiles() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScopeProfiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScopeProfiles(const ScopeProfiles& from) : ScopeProfiles(nullptr, from) {}
  inline ScopeProfiles(ScopeProfiles&& from) noexcept
      : ScopeProfiles(nullptr, std::move(from)) {}
  inline ScopeProfiles& operator=(const ScopeProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeProfiles& operator=(ScopeProfiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeProfiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeProfiles* internal_default_instance() {
    return reinterpret_cast<const ScopeProfiles*>(
        &_ScopeProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ScopeProfiles& a, ScopeProfiles& b) { a.Swap(&b); }
  inline void Swap(ScopeProfiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeProfiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeProfiles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScopeProfiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScopeProfiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScopeProfiles& from) { ScopeProfiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScopeProfiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1experimental.ScopeProfiles"; }

 protected:
  explicit ScopeProfiles(::google::protobuf::Arena* arena);
  ScopeProfiles(::google::protobuf::Arena* arena, const ScopeProfiles& from);
  ScopeProfiles(::google::protobuf::Arena* arena, ScopeProfiles&& from) noexcept
      : ScopeProfiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1experimental.ProfileContainer profiles = 2;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;

  public:
  void clear_profiles() ;
  ::opentelemetry::proto::profiles::v1experimental::ProfileContainer* mutable_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>* mutable_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>& _internal_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>* _internal_mutable_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1experimental::ProfileContainer& profiles(int index) const;
  ::opentelemetry::proto::profiles::v1experimental::ProfileContainer* add_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>& profiles() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  void unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1experimental.ScopeProfiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1experimental::ProfileContainer > profiles_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ResourceProfiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1experimental.ResourceProfiles) */ {
 public:
  inline ResourceProfiles() : ResourceProfiles(nullptr) {}
  ~ResourceProfiles() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceProfiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceProfiles(const ResourceProfiles& from) : ResourceProfiles(nullptr, from) {}
  inline ResourceProfiles(ResourceProfiles&& from) noexcept
      : ResourceProfiles(nullptr, std::move(from)) {}
  inline ResourceProfiles& operator=(const ResourceProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceProfiles& operator=(ResourceProfiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceProfiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceProfiles* internal_default_instance() {
    return reinterpret_cast<const ResourceProfiles*>(
        &_ResourceProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceProfiles& a, ResourceProfiles& b) { a.Swap(&b); }
  inline void Swap(ResourceProfiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceProfiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceProfiles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResourceProfiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceProfiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceProfiles& from) { ResourceProfiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceProfiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1experimental.ResourceProfiles"; }

 protected:
  explicit ResourceProfiles(::google::protobuf::Arena* arena);
  ResourceProfiles(::google::protobuf::Arena* arena, const ResourceProfiles& from);
  ResourceProfiles(::google::protobuf::Arena* arena, ResourceProfiles&& from) noexcept
      : ResourceProfiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScopeProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1experimental.ScopeProfiles scope_profiles = 2;
  int scope_profiles_size() const;
  private:
  int _internal_scope_profiles_size() const;

  public:
  void clear_scope_profiles() ;
  ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles* mutable_scope_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>* mutable_scope_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>& _internal_scope_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>* _internal_mutable_scope_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles& scope_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles* add_scope_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>& scope_profiles() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  void unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1experimental.ResourceProfiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles > scope_profiles_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ProfilesData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1experimental.ProfilesData) */ {
 public:
  inline ProfilesData() : ProfilesData(nullptr) {}
  ~ProfilesData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilesData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProfilesData(const ProfilesData& from) : ProfilesData(nullptr, from) {}
  inline ProfilesData(ProfilesData&& from) noexcept
      : ProfilesData(nullptr, std::move(from)) {}
  inline ProfilesData& operator=(const ProfilesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilesData& operator=(ProfilesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilesData* internal_default_instance() {
    return reinterpret_cast<const ProfilesData*>(
        &_ProfilesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProfilesData& a, ProfilesData& b) { a.Swap(&b); }
  inline void Swap(ProfilesData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilesData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilesData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProfilesData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfilesData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfilesData& from) { ProfilesData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProfilesData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1experimental.ProfilesData"; }

 protected:
  explicit ProfilesData(::google::protobuf::Arena* arena);
  ProfilesData(::google::protobuf::Arena* arena, const ProfilesData& from);
  ProfilesData(::google::protobuf::Arena* arena, ProfilesData&& from) noexcept
      : ProfilesData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourceProfilesFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1experimental.ResourceProfiles resource_profiles = 1;
  int resource_profiles_size() const;
  private:
  int _internal_resource_profiles_size() const;

  public:
  void clear_resource_profiles() ;
  ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles* mutable_resource_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>* mutable_resource_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>& _internal_resource_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>* _internal_mutable_resource_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles& resource_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles* add_resource_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>& resource_profiles() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1experimental.ProfilesData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles > resource_profiles_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProfilesData

// repeated .opentelemetry.proto.profiles.v1experimental.ResourceProfiles resource_profiles = 1;
inline int ProfilesData::_internal_resource_profiles_size() const {
  return _internal_resource_profiles().size();
}
inline int ProfilesData::resource_profiles_size() const {
  return _internal_resource_profiles_size();
}
inline void ProfilesData::clear_resource_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles* ProfilesData::mutable_resource_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfilesData.resource_profiles)
  return _internal_mutable_resource_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>* ProfilesData::mutable_resource_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1experimental.ProfilesData.resource_profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_profiles();
}
inline const ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles& ProfilesData::resource_profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfilesData.resource_profiles)
  return _internal_resource_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles* ProfilesData::add_resource_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1experimental::ResourceProfiles* _add = _internal_mutable_resource_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1experimental.ProfilesData.resource_profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>& ProfilesData::resource_profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1experimental.ProfilesData.resource_profiles)
  return _internal_resource_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>&
ProfilesData::_internal_resource_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ResourceProfiles>*
ProfilesData::_internal_mutable_resource_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_profiles_;
}

// -------------------------------------------------------------------

// ResourceProfiles

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceProfiles::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.resource)
  return _internal_resource();
}
inline void ResourceProfiles::unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.resource)
  return _msg;
}
inline void ResourceProfiles::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.resource)
}

// repeated .opentelemetry.proto.profiles.v1experimental.ScopeProfiles scope_profiles = 2;
inline int ResourceProfiles::_internal_scope_profiles_size() const {
  return _internal_scope_profiles().size();
}
inline int ResourceProfiles::scope_profiles_size() const {
  return _internal_scope_profiles_size();
}
inline void ResourceProfiles::clear_scope_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scope_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles* ResourceProfiles::mutable_scope_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.scope_profiles)
  return _internal_mutable_scope_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>* ResourceProfiles::mutable_scope_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.scope_profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scope_profiles();
}
inline const ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles& ResourceProfiles::scope_profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.scope_profiles)
  return _internal_scope_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles* ResourceProfiles::add_scope_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1experimental::ScopeProfiles* _add = _internal_mutable_scope_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.scope_profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>& ResourceProfiles::scope_profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.scope_profiles)
  return _internal_scope_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>&
ResourceProfiles::_internal_scope_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scope_profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ScopeProfiles>*
ResourceProfiles::_internal_mutable_scope_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scope_profiles_;
}

// string schema_url = 3;
inline void ResourceProfiles::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceProfiles::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceProfiles::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.schema_url)
}
inline std::string* ResourceProfiles::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.schema_url)
  return _s;
}
inline const std::string& ResourceProfiles::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ResourceProfiles::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ResourceProfiles::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ResourceProfiles::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceProfiles::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ResourceProfiles.schema_url)
}

// -------------------------------------------------------------------

// ScopeProfiles

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeProfiles::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::_internal_scope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::scope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.scope)
  return _internal_scope();
}
inline void ScopeProfiles::unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* released = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::unsafe_arena_release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.scope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::_internal_mutable_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArena());
    _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(p);
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::mutable_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.scope)
  return _msg;
}
inline void ScopeProfiles::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.scope)
}

// repeated .opentelemetry.proto.profiles.v1experimental.ProfileContainer profiles = 2;
inline int ScopeProfiles::_internal_profiles_size() const {
  return _internal_profiles().size();
}
inline int ScopeProfiles::profiles_size() const {
  return _internal_profiles_size();
}
inline void ScopeProfiles::clear_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1experimental::ProfileContainer* ScopeProfiles::mutable_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.profiles)
  return _internal_mutable_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>* ScopeProfiles::mutable_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_profiles();
}
inline const ::opentelemetry::proto::profiles::v1experimental::ProfileContainer& ScopeProfiles::profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.profiles)
  return _internal_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1experimental::ProfileContainer* ScopeProfiles::add_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1experimental::ProfileContainer* _add = _internal_mutable_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>& ScopeProfiles::profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.profiles)
  return _internal_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>&
ScopeProfiles::_internal_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1experimental::ProfileContainer>*
ScopeProfiles::_internal_mutable_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.profiles_;
}

// string schema_url = 3;
inline void ScopeProfiles::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeProfiles::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScopeProfiles::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.schema_url)
}
inline std::string* ScopeProfiles::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.schema_url)
  return _s;
}
inline const std::string& ScopeProfiles::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ScopeProfiles::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ScopeProfiles::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ScopeProfiles::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeProfiles::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ScopeProfiles.schema_url)
}

// -------------------------------------------------------------------

// ProfileContainer

// bytes profile_id = 1;
inline void ProfileContainer::clear_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.ClearToEmpty();
}
inline const std::string& ProfileContainer::profile_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile_id)
  return _internal_profile_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProfileContainer::set_profile_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile_id)
}
inline std::string* ProfileContainer::mutable_profile_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_profile_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile_id)
  return _s;
}
inline const std::string& ProfileContainer::_internal_profile_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profile_id_.Get();
}
inline void ProfileContainer::_internal_set_profile_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.Set(value, GetArena());
}
inline std::string* ProfileContainer::_internal_mutable_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.profile_id_.Mutable( GetArena());
}
inline std::string* ProfileContainer::release_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile_id)
  return _impl_.profile_id_.Release();
}
inline void ProfileContainer::set_allocated_profile_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profile_id_.IsDefault()) {
          _impl_.profile_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile_id)
}

// fixed64 start_time_unix_nano = 2;
inline void ProfileContainer::clear_start_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t ProfileContainer::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void ProfileContainer::set_start_time_unix_nano(::uint64_t value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.start_time_unix_nano)
}
inline ::uint64_t ProfileContainer::_internal_start_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_unix_nano_;
}
inline void ProfileContainer::_internal_set_start_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_unix_nano_ = value;
}

// fixed64 end_time_unix_nano = 3;
inline void ProfileContainer::clear_end_time_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_unix_nano_ = ::uint64_t{0u};
}
inline ::uint64_t ProfileContainer::end_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.end_time_unix_nano)
  return _internal_end_time_unix_nano();
}
inline void ProfileContainer::set_end_time_unix_nano(::uint64_t value) {
  _internal_set_end_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.end_time_unix_nano)
}
inline ::uint64_t ProfileContainer::_internal_end_time_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_time_unix_nano_;
}
inline void ProfileContainer::_internal_set_end_time_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_time_unix_nano_ = value;
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
inline int ProfileContainer::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int ProfileContainer::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* ProfileContainer::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfileContainer.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* ProfileContainer::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1experimental.ProfileContainer.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& ProfileContainer::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* ProfileContainer::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1experimental.ProfileContainer.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& ProfileContainer::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1experimental.ProfileContainer.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
ProfileContainer::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
ProfileContainer::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 5;
inline void ProfileContainer::clear_dropped_attributes_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t ProfileContainer::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void ProfileContainer::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.dropped_attributes_count)
}
inline ::uint32_t ProfileContainer::_internal_dropped_attributes_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dropped_attributes_count_;
}
inline void ProfileContainer::_internal_set_dropped_attributes_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = value;
}

// string original_payload_format = 6;
inline void ProfileContainer::clear_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.ClearToEmpty();
}
inline const std::string& ProfileContainer::original_payload_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload_format)
  return _internal_original_payload_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProfileContainer::set_original_payload_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload_format)
}
inline std::string* ProfileContainer::mutable_original_payload_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_payload_format();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload_format)
  return _s;
}
inline const std::string& ProfileContainer::_internal_original_payload_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.original_payload_format_.Get();
}
inline void ProfileContainer::_internal_set_original_payload_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.Set(value, GetArena());
}
inline std::string* ProfileContainer::_internal_mutable_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.original_payload_format_.Mutable( GetArena());
}
inline std::string* ProfileContainer::release_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload_format)
  return _impl_.original_payload_format_.Release();
}
inline void ProfileContainer::set_allocated_original_payload_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.original_payload_format_.IsDefault()) {
          _impl_.original_payload_format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload_format)
}

// bytes original_payload = 7;
inline void ProfileContainer::clear_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.ClearToEmpty();
}
inline const std::string& ProfileContainer::original_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload)
  return _internal_original_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProfileContainer::set_original_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload)
}
inline std::string* ProfileContainer::mutable_original_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_payload();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload)
  return _s;
}
inline const std::string& ProfileContainer::_internal_original_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.original_payload_.Get();
}
inline void ProfileContainer::_internal_set_original_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.Set(value, GetArena());
}
inline std::string* ProfileContainer::_internal_mutable_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.original_payload_.Mutable( GetArena());
}
inline std::string* ProfileContainer::release_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload)
  return _impl_.original_payload_.Release();
}
inline void ProfileContainer::set_allocated_original_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.original_payload_.IsDefault()) {
          _impl_.original_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ProfileContainer.original_payload)
}

// .opentelemetry.proto.profiles.v1experimental.Profile profile = 8;
inline bool ProfileContainer::has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::profiles::v1experimental::Profile& ProfileContainer::_internal_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::profiles::v1experimental::Profile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::profiles::v1experimental::Profile&>(::opentelemetry::proto::profiles::v1experimental::_Profile_default_instance_);
}
inline const ::opentelemetry::proto::profiles::v1experimental::Profile& ProfileContainer::profile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile)
  return _internal_profile();
}
inline void ProfileContainer::unsafe_arena_set_allocated_profile(::opentelemetry::proto::profiles::v1experimental::Profile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = reinterpret_cast<::opentelemetry::proto::profiles::v1experimental::Profile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile)
}
inline ::opentelemetry::proto::profiles::v1experimental::Profile* ProfileContainer::release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::profiles::v1experimental::Profile* released = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::profiles::v1experimental::Profile* ProfileContainer::unsafe_arena_release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::profiles::v1experimental::Profile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::profiles::v1experimental::Profile* ProfileContainer::_internal_mutable_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.profile_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::profiles::v1experimental::Profile>(GetArena());
    _impl_.profile_ = reinterpret_cast<::opentelemetry::proto::profiles::v1experimental::Profile*>(p);
  }
  return _impl_.profile_;
}
inline ::opentelemetry::proto::profiles::v1experimental::Profile* ProfileContainer::mutable_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::profiles::v1experimental::Profile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile)
  return _msg;
}
inline void ProfileContainer::set_allocated_profile(::opentelemetry::proto::profiles::v1experimental::Profile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.profile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.profile_ = reinterpret_cast<::opentelemetry::proto::profiles::v1experimental::Profile*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1experimental.ProfileContainer.profile)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1experimental
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1experimental_2fprofiles_2eproto_2epb_2eh
