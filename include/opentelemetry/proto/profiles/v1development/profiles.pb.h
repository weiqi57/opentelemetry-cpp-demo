// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/profiles/v1development/profiles.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {
class AttributeUnit;
struct AttributeUnitDefaultTypeInternal;
extern AttributeUnitDefaultTypeInternal _AttributeUnit_default_instance_;
class Function;
struct FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Link;
struct LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Mapping;
struct MappingDefaultTypeInternal;
extern MappingDefaultTypeInternal _Mapping_default_instance_;
class Profile;
struct ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class ProfilesData;
struct ProfilesDataDefaultTypeInternal;
extern ProfilesDataDefaultTypeInternal _ProfilesData_default_instance_;
class ResourceProfiles;
struct ResourceProfilesDefaultTypeInternal;
extern ResourceProfilesDefaultTypeInternal _ResourceProfiles_default_instance_;
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class ScopeProfiles;
struct ScopeProfilesDefaultTypeInternal;
extern ScopeProfilesDefaultTypeInternal _ScopeProfiles_default_instance_;
class ValueType;
struct ValueTypeDefaultTypeInternal;
extern ValueTypeDefaultTypeInternal _ValueType_default_instance_;
}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opentelemetry {
namespace proto {
namespace profiles {
namespace v1development {
enum AggregationTemporality : int {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
  AGGREGATION_TEMPORALITY_DELTA = 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
  AggregationTemporality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregationTemporality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregationTemporality_IsValid(int value);
extern const uint32_t AggregationTemporality_internal_data_[];
constexpr AggregationTemporality AggregationTemporality_MIN = static_cast<AggregationTemporality>(0);
constexpr AggregationTemporality AggregationTemporality_MAX = static_cast<AggregationTemporality>(2);
constexpr int AggregationTemporality_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AggregationTemporality_descriptor();
template <typename T>
const std::string& AggregationTemporality_Name(T value) {
  static_assert(std::is_same<T, AggregationTemporality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationTemporality_Name().");
  return AggregationTemporality_Name(static_cast<AggregationTemporality>(value));
}
template <>
inline const std::string& AggregationTemporality_Name(AggregationTemporality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AggregationTemporality_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AggregationTemporality_Parse(absl::string_view name, AggregationTemporality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AggregationTemporality>(
      AggregationTemporality_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ValueType final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ValueType) */ {
 public:
  inline ValueType() : ValueType(nullptr) {}
  ~ValueType() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValueType(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValueType(const ValueType& from) : ValueType(nullptr, from) {}
  inline ValueType(ValueType&& from) noexcept
      : ValueType(nullptr, std::move(from)) {}
  inline ValueType& operator=(const ValueType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType& operator=(ValueType&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueType* internal_default_instance() {
    return reinterpret_cast<const ValueType*>(
        &_ValueType_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ValueType& a, ValueType& b) { a.Swap(&b); }
  inline void Swap(ValueType* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueType* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ValueType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValueType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValueType& from) { ValueType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ValueType* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.ValueType"; }

 protected:
  explicit ValueType(::google::protobuf::Arena* arena);
  ValueType(::google::protobuf::Arena* arena, const ValueType& from);
  ValueType(::google::protobuf::Arena* arena, ValueType&& from) noexcept
      : ValueType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeStrindexFieldNumber = 1,
    kUnitStrindexFieldNumber = 2,
    kAggregationTemporalityFieldNumber = 3,
  };
  // int32 type_strindex = 1;
  void clear_type_strindex() ;
  ::int32_t type_strindex() const;
  void set_type_strindex(::int32_t value);

  private:
  ::int32_t _internal_type_strindex() const;
  void _internal_set_type_strindex(::int32_t value);

  public:
  // int32 unit_strindex = 2;
  void clear_unit_strindex() ;
  ::int32_t unit_strindex() const;
  void set_unit_strindex(::int32_t value);

  private:
  ::int32_t _internal_unit_strindex() const;
  void _internal_set_unit_strindex(::int32_t value);

  public:
  // .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
  void clear_aggregation_temporality() ;
  ::opentelemetry::proto::profiles::v1development::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value);

  private:
  ::opentelemetry::proto::profiles::v1development::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ValueType)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t type_strindex_;
    ::int32_t unit_strindex_;
    int aggregation_temporality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Sample final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  ~Sample() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Sample(
      ::google::protobuf::internal::ConstantInitialized);

  inline Sample(const Sample& from) : Sample(nullptr, from) {}
  inline Sample(Sample&& from) noexcept
      : Sample(nullptr, std::move(from)) {}
  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
        &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Sample& a, Sample& b) { a.Swap(&b); }
  inline void Swap(Sample* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sample* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Sample>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sample& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Sample& from) { Sample::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Sample* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Sample"; }

 protected:
  explicit Sample(::google::protobuf::Arena* arena);
  Sample(::google::protobuf::Arena* arena, const Sample& from);
  Sample(::google::protobuf::Arena* arena, Sample&& from) noexcept
      : Sample(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 3,
    kAttributeIndicesFieldNumber = 4,
    kTimestampsUnixNanoFieldNumber = 6,
    kLocationsStartIndexFieldNumber = 1,
    kLocationsLengthFieldNumber = 2,
    kLinkIndexFieldNumber = 5,
  };
  // repeated int64 value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::int64_t value(int index) const;
  void set_value(int index, ::int64_t value);
  void add_value(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& value() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_value();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_value() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_value();

  public:
  // repeated int32 attribute_indices = 4;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;

  public:
  void clear_attribute_indices() ;
  ::int32_t attribute_indices(int index) const;
  void set_attribute_indices(int index, ::int32_t value);
  void add_attribute_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_attribute_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_attribute_indices();

  public:
  // repeated uint64 timestamps_unix_nano = 6;
  int timestamps_unix_nano_size() const;
  private:
  int _internal_timestamps_unix_nano_size() const;

  public:
  void clear_timestamps_unix_nano() ;
  ::uint64_t timestamps_unix_nano(int index) const;
  void set_timestamps_unix_nano(int index, ::uint64_t value);
  void add_timestamps_unix_nano(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& timestamps_unix_nano() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_timestamps_unix_nano();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_timestamps_unix_nano() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_timestamps_unix_nano();

  public:
  // int32 locations_start_index = 1;
  void clear_locations_start_index() ;
  ::int32_t locations_start_index() const;
  void set_locations_start_index(::int32_t value);

  private:
  ::int32_t _internal_locations_start_index() const;
  void _internal_set_locations_start_index(::int32_t value);

  public:
  // int32 locations_length = 2;
  void clear_locations_length() ;
  ::int32_t locations_length() const;
  void set_locations_length(::int32_t value);

  private:
  ::int32_t _internal_locations_length() const;
  void _internal_set_locations_length(::int32_t value);

  public:
  // optional int32 link_index = 5;
  bool has_link_index() const;
  void clear_link_index() ;
  ::int32_t link_index() const;
  void set_link_index(::int32_t value);

  private:
  ::int32_t _internal_link_index() const;
  void _internal_set_link_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Sample)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> value_;
    mutable ::google::protobuf::internal::CachedSize _value_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> attribute_indices_;
    mutable ::google::protobuf::internal::CachedSize _attribute_indices_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint64_t> timestamps_unix_nano_;
    mutable ::google::protobuf::internal::CachedSize _timestamps_unix_nano_cached_byte_size_;
    ::int32_t locations_start_index_;
    ::int32_t locations_length_;
    ::int32_t link_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Mapping final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Mapping) */ {
 public:
  inline Mapping() : Mapping(nullptr) {}
  ~Mapping() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Mapping(
      ::google::protobuf::internal::ConstantInitialized);

  inline Mapping(const Mapping& from) : Mapping(nullptr, from) {}
  inline Mapping(Mapping&& from) noexcept
      : Mapping(nullptr, std::move(from)) {}
  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mapping& operator=(Mapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mapping* internal_default_instance() {
    return reinterpret_cast<const Mapping*>(
        &_Mapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Mapping& a, Mapping& b) { a.Swap(&b); }
  inline void Swap(Mapping* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mapping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mapping* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Mapping>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Mapping& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Mapping& from) { Mapping::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Mapping* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Mapping"; }

 protected:
  explicit Mapping(::google::protobuf::Arena* arena);
  Mapping(::google::protobuf::Arena* arena, const Mapping& from);
  Mapping(::google::protobuf::Arena* arena, Mapping&& from) noexcept
      : Mapping(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributeIndicesFieldNumber = 5,
    kMemoryStartFieldNumber = 1,
    kMemoryLimitFieldNumber = 2,
    kFileOffsetFieldNumber = 3,
    kFilenameStrindexFieldNumber = 4,
    kHasFunctionsFieldNumber = 6,
    kHasFilenamesFieldNumber = 7,
    kHasLineNumbersFieldNumber = 8,
    kHasInlineFramesFieldNumber = 9,
  };
  // repeated int32 attribute_indices = 5;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;

  public:
  void clear_attribute_indices() ;
  ::int32_t attribute_indices(int index) const;
  void set_attribute_indices(int index, ::int32_t value);
  void add_attribute_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_attribute_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_attribute_indices();

  public:
  // uint64 memory_start = 1;
  void clear_memory_start() ;
  ::uint64_t memory_start() const;
  void set_memory_start(::uint64_t value);

  private:
  ::uint64_t _internal_memory_start() const;
  void _internal_set_memory_start(::uint64_t value);

  public:
  // uint64 memory_limit = 2;
  void clear_memory_limit() ;
  ::uint64_t memory_limit() const;
  void set_memory_limit(::uint64_t value);

  private:
  ::uint64_t _internal_memory_limit() const;
  void _internal_set_memory_limit(::uint64_t value);

  public:
  // uint64 file_offset = 3;
  void clear_file_offset() ;
  ::uint64_t file_offset() const;
  void set_file_offset(::uint64_t value);

  private:
  ::uint64_t _internal_file_offset() const;
  void _internal_set_file_offset(::uint64_t value);

  public:
  // int32 filename_strindex = 4;
  void clear_filename_strindex() ;
  ::int32_t filename_strindex() const;
  void set_filename_strindex(::int32_t value);

  private:
  ::int32_t _internal_filename_strindex() const;
  void _internal_set_filename_strindex(::int32_t value);

  public:
  // bool has_functions = 6;
  void clear_has_functions() ;
  bool has_functions() const;
  void set_has_functions(bool value);

  private:
  bool _internal_has_functions() const;
  void _internal_set_has_functions(bool value);

  public:
  // bool has_filenames = 7;
  void clear_has_filenames() ;
  bool has_filenames() const;
  void set_has_filenames(bool value);

  private:
  bool _internal_has_filenames() const;
  void _internal_set_has_filenames(bool value);

  public:
  // bool has_line_numbers = 8;
  void clear_has_line_numbers() ;
  bool has_line_numbers() const;
  void set_has_line_numbers(bool value);

  private:
  bool _internal_has_line_numbers() const;
  void _internal_set_has_line_numbers(bool value);

  public:
  // bool has_inline_frames = 9;
  void clear_has_inline_frames() ;
  bool has_inline_frames() const;
  void set_has_inline_frames(bool value);

  private:
  bool _internal_has_inline_frames() const;
  void _internal_set_has_inline_frames(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Mapping)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> attribute_indices_;
    mutable ::google::protobuf::internal::CachedSize _attribute_indices_cached_byte_size_;
    ::uint64_t memory_start_;
    ::uint64_t memory_limit_;
    ::uint64_t file_offset_;
    ::int32_t filename_strindex_;
    bool has_functions_;
    bool has_filenames_;
    bool has_line_numbers_;
    bool has_inline_frames_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Link final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Link) */ {
 public:
  inline Link() : Link(nullptr) {}
  ~Link() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Link(
      ::google::protobuf::internal::ConstantInitialized);

  inline Link(const Link& from) : Link(nullptr, from) {}
  inline Link(Link&& from) noexcept
      : Link(nullptr, std::move(from)) {}
  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Link& default_instance() {
    return *internal_default_instance();
  }
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
        &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Link& a, Link& b) { a.Swap(&b); }
  inline void Swap(Link* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Link* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Link* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Link>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Link& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Link& from) { Link::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Link* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Link"; }

 protected:
  explicit Link(::google::protobuf::Arena* arena);
  Link(::google::protobuf::Arena* arena, const Link& from);
  Link(::google::protobuf::Arena* arena, Link&& from) noexcept
      : Link(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
  };
  // bytes trace_id = 1;
  void clear_trace_id() ;
  const std::string& trace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* value);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // bytes span_id = 2;
  void clear_span_id() ;
  const std::string& span_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_span_id(Arg_&& arg, Args_... args);
  std::string* mutable_span_id();
  PROTOBUF_NODISCARD std::string* release_span_id();
  void set_allocated_span_id(std::string* value);

  private:
  const std::string& _internal_span_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_span_id(
      const std::string& value);
  std::string* _internal_mutable_span_id();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Link)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trace_id_;
    ::google::protobuf::internal::ArenaStringPtr span_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Line final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Line(
      ::google::protobuf::internal::ConstantInitialized);

  inline Line(const Line& from) : Line(nullptr, from) {}
  inline Line(Line&& from) noexcept
      : Line(nullptr, std::move(from)) {}
  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
        &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Line& a, Line& b) { a.Swap(&b); }
  inline void Swap(Line* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Line>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Line& from) { Line::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Line* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Line"; }

 protected:
  explicit Line(::google::protobuf::Arena* arena);
  Line(::google::protobuf::Arena* arena, const Line& from);
  Line(::google::protobuf::Arena* arena, Line&& from) noexcept
      : Line(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLineFieldNumber = 2,
    kColumnFieldNumber = 3,
    kFunctionIndexFieldNumber = 1,
  };
  // int64 line = 2;
  void clear_line() ;
  ::int64_t line() const;
  void set_line(::int64_t value);

  private:
  ::int64_t _internal_line() const;
  void _internal_set_line(::int64_t value);

  public:
  // int64 column = 3;
  void clear_column() ;
  ::int64_t column() const;
  void set_column(::int64_t value);

  private:
  ::int64_t _internal_column() const;
  void _internal_set_column(::int64_t value);

  public:
  // int32 function_index = 1;
  void clear_function_index() ;
  ::int32_t function_index() const;
  void set_function_index(::int32_t value);

  private:
  ::int32_t _internal_function_index() const;
  void _internal_set_function_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Line)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t line_;
    ::int64_t column_;
    ::int32_t function_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Label final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Label(
      ::google::protobuf::internal::ConstantInitialized);

  inline Label(const Label& from) : Label(nullptr, from) {}
  inline Label(Label&& from) noexcept
      : Label(nullptr, std::move(from)) {}
  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
        &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Label& a, Label& b) { a.Swap(&b); }
  inline void Swap(Label* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Label>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Label& from) { Label::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Label* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Label"; }

 protected:
  explicit Label(::google::protobuf::Arena* arena);
  Label(::google::protobuf::Arena* arena, const Label& from);
  Label(::google::protobuf::Arena* arena, Label&& from) noexcept
      : Label(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyStrindexFieldNumber = 1,
    kStrStrindexFieldNumber = 2,
    kNumFieldNumber = 3,
    kNumUnitStrindexFieldNumber = 4,
  };
  // int32 key_strindex = 1;
  void clear_key_strindex() ;
  ::int32_t key_strindex() const;
  void set_key_strindex(::int32_t value);

  private:
  ::int32_t _internal_key_strindex() const;
  void _internal_set_key_strindex(::int32_t value);

  public:
  // int32 str_strindex = 2;
  void clear_str_strindex() ;
  ::int32_t str_strindex() const;
  void set_str_strindex(::int32_t value);

  private:
  ::int32_t _internal_str_strindex() const;
  void _internal_set_str_strindex(::int32_t value);

  public:
  // int64 num = 3;
  void clear_num() ;
  ::int64_t num() const;
  void set_num(::int64_t value);

  private:
  ::int64_t _internal_num() const;
  void _internal_set_num(::int64_t value);

  public:
  // int32 num_unit_strindex = 4;
  void clear_num_unit_strindex() ;
  ::int32_t num_unit_strindex() const;
  void set_num_unit_strindex(::int32_t value);

  private:
  ::int32_t _internal_num_unit_strindex() const;
  void _internal_set_num_unit_strindex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Label)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t key_strindex_;
    ::int32_t str_strindex_;
    ::int64_t num_;
    ::int32_t num_unit_strindex_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Function final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Function) */ {
 public:
  inline Function() : Function(nullptr) {}
  ~Function() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Function(
      ::google::protobuf::internal::ConstantInitialized);

  inline Function(const Function& from) : Function(nullptr, from) {}
  inline Function(Function&& from) noexcept
      : Function(nullptr, std::move(from)) {}
  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Function& default_instance() {
    return *internal_default_instance();
  }
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
        &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Function& a, Function& b) { a.Swap(&b); }
  inline void Swap(Function* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Function* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Function* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Function>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Function& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Function& from) { Function::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Function* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Function"; }

 protected:
  explicit Function(::google::protobuf::Arena* arena);
  Function(::google::protobuf::Arena* arena, const Function& from);
  Function(::google::protobuf::Arena* arena, Function&& from) noexcept
      : Function(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameStrindexFieldNumber = 1,
    kSystemNameStrindexFieldNumber = 2,
    kStartLineFieldNumber = 4,
    kFilenameStrindexFieldNumber = 3,
  };
  // int32 name_strindex = 1;
  void clear_name_strindex() ;
  ::int32_t name_strindex() const;
  void set_name_strindex(::int32_t value);

  private:
  ::int32_t _internal_name_strindex() const;
  void _internal_set_name_strindex(::int32_t value);

  public:
  // int32 system_name_strindex = 2;
  void clear_system_name_strindex() ;
  ::int32_t system_name_strindex() const;
  void set_system_name_strindex(::int32_t value);

  private:
  ::int32_t _internal_system_name_strindex() const;
  void _internal_set_system_name_strindex(::int32_t value);

  public:
  // int64 start_line = 4;
  void clear_start_line() ;
  ::int64_t start_line() const;
  void set_start_line(::int64_t value);

  private:
  ::int64_t _internal_start_line() const;
  void _internal_set_start_line(::int64_t value);

  public:
  // int32 filename_strindex = 3;
  void clear_filename_strindex() ;
  ::int32_t filename_strindex() const;
  void set_filename_strindex(::int32_t value);

  private:
  ::int32_t _internal_filename_strindex() const;
  void _internal_set_filename_strindex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Function)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t name_strindex_;
    ::int32_t system_name_strindex_;
    ::int64_t start_line_;
    ::int32_t filename_strindex_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class AttributeUnit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.AttributeUnit) */ {
 public:
  inline AttributeUnit() : AttributeUnit(nullptr) {}
  ~AttributeUnit() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeUnit(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttributeUnit(const AttributeUnit& from) : AttributeUnit(nullptr, from) {}
  inline AttributeUnit(AttributeUnit&& from) noexcept
      : AttributeUnit(nullptr, std::move(from)) {}
  inline AttributeUnit& operator=(const AttributeUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeUnit& operator=(AttributeUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeUnit* internal_default_instance() {
    return reinterpret_cast<const AttributeUnit*>(
        &_AttributeUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AttributeUnit& a, AttributeUnit& b) { a.Swap(&b); }
  inline void Swap(AttributeUnit* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeUnit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeUnit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AttributeUnit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeUnit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttributeUnit& from) { AttributeUnit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeUnit* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.AttributeUnit"; }

 protected:
  explicit AttributeUnit(::google::protobuf::Arena* arena);
  AttributeUnit(::google::protobuf::Arena* arena, const AttributeUnit& from);
  AttributeUnit(::google::protobuf::Arena* arena, AttributeUnit&& from) noexcept
      : AttributeUnit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributeKeyStrindexFieldNumber = 1,
    kUnitStrindexFieldNumber = 2,
  };
  // int32 attribute_key_strindex = 1;
  void clear_attribute_key_strindex() ;
  ::int32_t attribute_key_strindex() const;
  void set_attribute_key_strindex(::int32_t value);

  private:
  ::int32_t _internal_attribute_key_strindex() const;
  void _internal_set_attribute_key_strindex(::int32_t value);

  public:
  // int32 unit_strindex = 2;
  void clear_unit_strindex() ;
  ::int32_t unit_strindex() const;
  void set_unit_strindex(::int32_t value);

  private:
  ::int32_t _internal_unit_strindex() const;
  void _internal_set_unit_strindex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.AttributeUnit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t attribute_key_strindex_;
    ::int32_t unit_strindex_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Location final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Location(
      ::google::protobuf::internal::ConstantInitialized);

  inline Location(const Location& from) : Location(nullptr, from) {}
  inline Location(Location&& from) noexcept
      : Location(nullptr, std::move(from)) {}
  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
        &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Location& a, Location& b) { a.Swap(&b); }
  inline void Swap(Location* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Location>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Location& from) { Location::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Location* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Location"; }

 protected:
  explicit Location(::google::protobuf::Arena* arena);
  Location(::google::protobuf::Arena* arena, const Location& from);
  Location(::google::protobuf::Arena* arena, Location&& from) noexcept
      : Location(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLineFieldNumber = 3,
    kAttributeIndicesFieldNumber = 5,
    kAddressFieldNumber = 2,
    kMappingIndexFieldNumber = 1,
    kIsFoldedFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
  int line_size() const;
  private:
  int _internal_line_size() const;

  public:
  void clear_line() ;
  ::opentelemetry::proto::profiles::v1development::Line* mutable_line(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>* mutable_line();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>& _internal_line() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>* _internal_mutable_line();
  public:
  const ::opentelemetry::proto::profiles::v1development::Line& line(int index) const;
  ::opentelemetry::proto::profiles::v1development::Line* add_line();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>& line() const;
  // repeated int32 attribute_indices = 5;
  int attribute_indices_size() const;
  private:
  int _internal_attribute_indices_size() const;

  public:
  void clear_attribute_indices() ;
  ::int32_t attribute_indices(int index) const;
  void set_attribute_indices(int index, ::int32_t value);
  void add_attribute_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_attribute_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_attribute_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_attribute_indices();

  public:
  // uint64 address = 2;
  void clear_address() ;
  ::uint64_t address() const;
  void set_address(::uint64_t value);

  private:
  ::uint64_t _internal_address() const;
  void _internal_set_address(::uint64_t value);

  public:
  // optional int32 mapping_index = 1;
  bool has_mapping_index() const;
  void clear_mapping_index() ;
  ::int32_t mapping_index() const;
  void set_mapping_index(::int32_t value);

  private:
  ::int32_t _internal_mapping_index() const;
  void _internal_set_mapping_index(::int32_t value);

  public:
  // bool is_folded = 4;
  void clear_is_folded() ;
  bool is_folded() const;
  void set_is_folded(bool value);

  private:
  bool _internal_is_folded() const;
  void _internal_set_is_folded(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Location)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Line > line_;
    ::google::protobuf::RepeatedField<::int32_t> attribute_indices_;
    mutable ::google::protobuf::internal::CachedSize _attribute_indices_cached_byte_size_;
    ::uint64_t address_;
    ::int32_t mapping_index_;
    bool is_folded_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class Profile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.Profile) */ {
 public:
  inline Profile() : Profile(nullptr) {}
  ~Profile() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Profile(
      ::google::protobuf::internal::ConstantInitialized);

  inline Profile(const Profile& from) : Profile(nullptr, from) {}
  inline Profile(Profile&& from) noexcept
      : Profile(nullptr, std::move(from)) {}
  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profile& operator=(Profile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Profile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
        &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Profile& a, Profile& b) { a.Swap(&b); }
  inline void Swap(Profile* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Profile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Profile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Profile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Profile& from) { Profile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Profile* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.Profile"; }

 protected:
  explicit Profile(::google::protobuf::Arena* arena);
  Profile(::google::protobuf::Arena* arena, const Profile& from);
  Profile(::google::protobuf::Arena* arena, Profile&& from) noexcept
      : Profile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSampleTypeFieldNumber = 1,
    kSampleFieldNumber = 2,
    kMappingTableFieldNumber = 3,
    kLocationTableFieldNumber = 4,
    kLocationIndicesFieldNumber = 5,
    kFunctionTableFieldNumber = 6,
    kAttributeTableFieldNumber = 7,
    kAttributeUnitsFieldNumber = 8,
    kLinkTableFieldNumber = 9,
    kStringTableFieldNumber = 10,
    kCommentStrindicesFieldNumber = 15,
    kAttributesFieldNumber = 18,
    kProfileIdFieldNumber = 17,
    kOriginalPayloadFormatFieldNumber = 20,
    kOriginalPayloadFieldNumber = 21,
    kPeriodTypeFieldNumber = 13,
    kTimeNanosFieldNumber = 11,
    kDurationNanosFieldNumber = 12,
    kPeriodFieldNumber = 14,
    kDefaultSampleTypeStrindexFieldNumber = 16,
    kDroppedAttributesCountFieldNumber = 19,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
  int sample_type_size() const;
  private:
  int _internal_sample_type_size() const;

  public:
  void clear_sample_type() ;
  ::opentelemetry::proto::profiles::v1development::ValueType* mutable_sample_type(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>* mutable_sample_type();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>& _internal_sample_type() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>* _internal_mutable_sample_type();
  public:
  const ::opentelemetry::proto::profiles::v1development::ValueType& sample_type(int index) const;
  ::opentelemetry::proto::profiles::v1development::ValueType* add_sample_type();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>& sample_type() const;
  // repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
  int sample_size() const;
  private:
  int _internal_sample_size() const;

  public:
  void clear_sample() ;
  ::opentelemetry::proto::profiles::v1development::Sample* mutable_sample(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>* mutable_sample();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>& _internal_sample() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>* _internal_mutable_sample();
  public:
  const ::opentelemetry::proto::profiles::v1development::Sample& sample(int index) const;
  ::opentelemetry::proto::profiles::v1development::Sample* add_sample();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>& sample() const;
  // repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
  int mapping_table_size() const;
  private:
  int _internal_mapping_table_size() const;

  public:
  void clear_mapping_table() ;
  ::opentelemetry::proto::profiles::v1development::Mapping* mutable_mapping_table(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>* mutable_mapping_table();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>& _internal_mapping_table() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>* _internal_mutable_mapping_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Mapping& mapping_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Mapping* add_mapping_table();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>& mapping_table() const;
  // repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
  int location_table_size() const;
  private:
  int _internal_location_table_size() const;

  public:
  void clear_location_table() ;
  ::opentelemetry::proto::profiles::v1development::Location* mutable_location_table(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>* mutable_location_table();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>& _internal_location_table() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>* _internal_mutable_location_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Location& location_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Location* add_location_table();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>& location_table() const;
  // repeated int32 location_indices = 5;
  int location_indices_size() const;
  private:
  int _internal_location_indices_size() const;

  public:
  void clear_location_indices() ;
  ::int32_t location_indices(int index) const;
  void set_location_indices(int index, ::int32_t value);
  void add_location_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& location_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_location_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_location_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_location_indices();

  public:
  // repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
  int function_table_size() const;
  private:
  int _internal_function_table_size() const;

  public:
  void clear_function_table() ;
  ::opentelemetry::proto::profiles::v1development::Function* mutable_function_table(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>* mutable_function_table();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>& _internal_function_table() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>* _internal_mutable_function_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Function& function_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Function* add_function_table();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>& function_table() const;
  // repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
  int attribute_table_size() const;
  private:
  int _internal_attribute_table_size() const;

  public:
  void clear_attribute_table() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attribute_table(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attribute_table();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attribute_table() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attribute_table();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attribute_table(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attribute_table();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attribute_table() const;
  // repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
  int attribute_units_size() const;
  private:
  int _internal_attribute_units_size() const;

  public:
  void clear_attribute_units() ;
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* mutable_attribute_units(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>* mutable_attribute_units();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>& _internal_attribute_units() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>* _internal_mutable_attribute_units();
  public:
  const ::opentelemetry::proto::profiles::v1development::AttributeUnit& attribute_units(int index) const;
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* add_attribute_units();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>& attribute_units() const;
  // repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
  int link_table_size() const;
  private:
  int _internal_link_table_size() const;

  public:
  void clear_link_table() ;
  ::opentelemetry::proto::profiles::v1development::Link* mutable_link_table(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>* mutable_link_table();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>& _internal_link_table() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>* _internal_mutable_link_table();
  public:
  const ::opentelemetry::proto::profiles::v1development::Link& link_table(int index) const;
  ::opentelemetry::proto::profiles::v1development::Link* add_link_table();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>& link_table() const;
  // repeated string string_table = 10;
  int string_table_size() const;
  private:
  int _internal_string_table_size() const;

  public:
  void clear_string_table() ;
  const std::string& string_table(int index) const;
  std::string* mutable_string_table(int index);
  void set_string_table(int index, const std::string& value);
  void set_string_table(int index, std::string&& value);
  void set_string_table(int index, const char* value);
  void set_string_table(int index, const char* value, std::size_t size);
  void set_string_table(int index, absl::string_view value);
  std::string* add_string_table();
  void add_string_table(const std::string& value);
  void add_string_table(std::string&& value);
  void add_string_table(const char* value);
  void add_string_table(const char* value, std::size_t size);
  void add_string_table(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& string_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_table();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_table() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_table();

  public:
  // repeated int32 comment_strindices = 15;
  int comment_strindices_size() const;
  private:
  int _internal_comment_strindices_size() const;

  public:
  void clear_comment_strindices() ;
  ::int32_t comment_strindices(int index) const;
  void set_comment_strindices(int index, ::int32_t value);
  void add_comment_strindices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& comment_strindices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_comment_strindices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_comment_strindices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_comment_strindices();

  public:
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 18;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* _internal_mutable_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& attributes() const;
  // bytes profile_id = 17;
  void clear_profile_id() ;
  const std::string& profile_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile_id(Arg_&& arg, Args_... args);
  std::string* mutable_profile_id();
  PROTOBUF_NODISCARD std::string* release_profile_id();
  void set_allocated_profile_id(std::string* value);

  private:
  const std::string& _internal_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_id(
      const std::string& value);
  std::string* _internal_mutable_profile_id();

  public:
  // string original_payload_format = 20;
  void clear_original_payload_format() ;
  const std::string& original_payload_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_payload_format(Arg_&& arg, Args_... args);
  std::string* mutable_original_payload_format();
  PROTOBUF_NODISCARD std::string* release_original_payload_format();
  void set_allocated_original_payload_format(std::string* value);

  private:
  const std::string& _internal_original_payload_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_payload_format(
      const std::string& value);
  std::string* _internal_mutable_original_payload_format();

  public:
  // bytes original_payload = 21;
  void clear_original_payload() ;
  const std::string& original_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_payload(Arg_&& arg, Args_... args);
  std::string* mutable_original_payload();
  PROTOBUF_NODISCARD std::string* release_original_payload();
  void set_allocated_original_payload(std::string* value);

  private:
  const std::string& _internal_original_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_payload(
      const std::string& value);
  std::string* _internal_mutable_original_payload();

  public:
  // .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
  bool has_period_type() const;
  void clear_period_type() ;
  const ::opentelemetry::proto::profiles::v1development::ValueType& period_type() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::profiles::v1development::ValueType* release_period_type();
  ::opentelemetry::proto::profiles::v1development::ValueType* mutable_period_type();
  void set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* value);
  void unsafe_arena_set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* value);
  ::opentelemetry::proto::profiles::v1development::ValueType* unsafe_arena_release_period_type();

  private:
  const ::opentelemetry::proto::profiles::v1development::ValueType& _internal_period_type() const;
  ::opentelemetry::proto::profiles::v1development::ValueType* _internal_mutable_period_type();

  public:
  // int64 time_nanos = 11;
  void clear_time_nanos() ;
  ::int64_t time_nanos() const;
  void set_time_nanos(::int64_t value);

  private:
  ::int64_t _internal_time_nanos() const;
  void _internal_set_time_nanos(::int64_t value);

  public:
  // int64 duration_nanos = 12;
  void clear_duration_nanos() ;
  ::int64_t duration_nanos() const;
  void set_duration_nanos(::int64_t value);

  private:
  ::int64_t _internal_duration_nanos() const;
  void _internal_set_duration_nanos(::int64_t value);

  public:
  // int64 period = 14;
  void clear_period() ;
  ::int64_t period() const;
  void set_period(::int64_t value);

  private:
  ::int64_t _internal_period() const;
  void _internal_set_period(::int64_t value);

  public:
  // int32 default_sample_type_strindex = 16;
  void clear_default_sample_type_strindex() ;
  ::int32_t default_sample_type_strindex() const;
  void set_default_sample_type_strindex(::int32_t value);

  private:
  ::int32_t _internal_default_sample_type_strindex() const;
  void _internal_set_default_sample_type_strindex(::int32_t value);

  public:
  // uint32 dropped_attributes_count = 19;
  void clear_dropped_attributes_count() ;
  ::uint32_t dropped_attributes_count() const;
  void set_dropped_attributes_count(::uint32_t value);

  private:
  ::uint32_t _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.Profile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 21, 10,
      110, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ValueType > sample_type_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Sample > sample_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Mapping > mapping_table_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Location > location_table_;
    ::google::protobuf::RepeatedField<::int32_t> location_indices_;
    mutable ::google::protobuf::internal::CachedSize _location_indices_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Function > function_table_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attribute_table_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::AttributeUnit > attribute_units_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Link > link_table_;
    ::google::protobuf::RepeatedPtrField<std::string> string_table_;
    ::google::protobuf::RepeatedField<::int32_t> comment_strindices_;
    mutable ::google::protobuf::internal::CachedSize _comment_strindices_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
    ::google::protobuf::internal::ArenaStringPtr profile_id_;
    ::google::protobuf::internal::ArenaStringPtr original_payload_format_;
    ::google::protobuf::internal::ArenaStringPtr original_payload_;
    ::opentelemetry::proto::profiles::v1development::ValueType* period_type_;
    ::int64_t time_nanos_;
    ::int64_t duration_nanos_;
    ::int64_t period_;
    ::int32_t default_sample_type_strindex_;
    ::uint32_t dropped_attributes_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ScopeProfiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ScopeProfiles) */ {
 public:
  inline ScopeProfiles() : ScopeProfiles(nullptr) {}
  ~ScopeProfiles() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScopeProfiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScopeProfiles(const ScopeProfiles& from) : ScopeProfiles(nullptr, from) {}
  inline ScopeProfiles(ScopeProfiles&& from) noexcept
      : ScopeProfiles(nullptr, std::move(from)) {}
  inline ScopeProfiles& operator=(const ScopeProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeProfiles& operator=(ScopeProfiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScopeProfiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScopeProfiles* internal_default_instance() {
    return reinterpret_cast<const ScopeProfiles*>(
        &_ScopeProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ScopeProfiles& a, ScopeProfiles& b) { a.Swap(&b); }
  inline void Swap(ScopeProfiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScopeProfiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScopeProfiles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScopeProfiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScopeProfiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScopeProfiles& from) { ScopeProfiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScopeProfiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.ScopeProfiles"; }

 protected:
  explicit ScopeProfiles(::google::protobuf::Arena* arena);
  ScopeProfiles(::google::protobuf::Arena* arena, const ScopeProfiles& from);
  ScopeProfiles(::google::protobuf::Arena* arena, ScopeProfiles&& from) noexcept
      : ScopeProfiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kScopeFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;

  public:
  void clear_profiles() ;
  ::opentelemetry::proto::profiles::v1development::Profile* mutable_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>* mutable_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>& _internal_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>* _internal_mutable_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::Profile& profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::Profile* add_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>& profiles() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::opentelemetry::proto::common::v1::InstrumentationScope& scope() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::common::v1::InstrumentationScope* release_scope();
  ::opentelemetry::proto::common::v1::InstrumentationScope* mutable_scope();
  void set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  void unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value);
  ::opentelemetry::proto::common::v1::InstrumentationScope* unsafe_arena_release_scope();

  private:
  const ::opentelemetry::proto::common::v1::InstrumentationScope& _internal_scope() const;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _internal_mutable_scope();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ScopeProfiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::Profile > profiles_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::common::v1::InstrumentationScope* scope_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ResourceProfiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ResourceProfiles) */ {
 public:
  inline ResourceProfiles() : ResourceProfiles(nullptr) {}
  ~ResourceProfiles() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResourceProfiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResourceProfiles(const ResourceProfiles& from) : ResourceProfiles(nullptr, from) {}
  inline ResourceProfiles(ResourceProfiles&& from) noexcept
      : ResourceProfiles(nullptr, std::move(from)) {}
  inline ResourceProfiles& operator=(const ResourceProfiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceProfiles& operator=(ResourceProfiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceProfiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceProfiles* internal_default_instance() {
    return reinterpret_cast<const ResourceProfiles*>(
        &_ResourceProfiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResourceProfiles& a, ResourceProfiles& b) { a.Swap(&b); }
  inline void Swap(ResourceProfiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceProfiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceProfiles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResourceProfiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResourceProfiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResourceProfiles& from) { ResourceProfiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResourceProfiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.ResourceProfiles"; }

 protected:
  explicit ResourceProfiles(::google::protobuf::Arena* arena);
  ResourceProfiles(::google::protobuf::Arena* arena, const ResourceProfiles& from);
  ResourceProfiles(::google::protobuf::Arena* arena, ResourceProfiles&& from) noexcept
      : ResourceProfiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScopeProfilesFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
  int scope_profiles_size() const;
  private:
  int _internal_scope_profiles_size() const;

  public:
  void clear_scope_profiles() ;
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* mutable_scope_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>* mutable_scope_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>& _internal_scope_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>* _internal_mutable_scope_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& scope_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* add_scope_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>& scope_profiles() const;
  // string schema_url = 3;
  void clear_schema_url() ;
  const std::string& schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_schema_url();
  PROTOBUF_NODISCARD std::string* release_schema_url();
  void set_allocated_schema_url(std::string* value);

  private:
  const std::string& _internal_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_url(
      const std::string& value);
  std::string* _internal_mutable_schema_url();

  public:
  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  void clear_resource() ;
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  void unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();

  public:
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ResourceProfiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ScopeProfiles > scope_profiles_;
    ::google::protobuf::internal::ArenaStringPtr schema_url_;
    ::opentelemetry::proto::resource::v1::Resource* resource_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};
// -------------------------------------------------------------------

class ProfilesData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:opentelemetry.proto.profiles.v1development.ProfilesData) */ {
 public:
  inline ProfilesData() : ProfilesData(nullptr) {}
  ~ProfilesData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilesData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProfilesData(const ProfilesData& from) : ProfilesData(nullptr, from) {}
  inline ProfilesData(ProfilesData&& from) noexcept
      : ProfilesData(nullptr, std::move(from)) {}
  inline ProfilesData& operator=(const ProfilesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilesData& operator=(ProfilesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilesData* internal_default_instance() {
    return reinterpret_cast<const ProfilesData*>(
        &_ProfilesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProfilesData& a, ProfilesData& b) { a.Swap(&b); }
  inline void Swap(ProfilesData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilesData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilesData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProfilesData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProfilesData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProfilesData& from) { ProfilesData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProfilesData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "opentelemetry.proto.profiles.v1development.ProfilesData"; }

 protected:
  explicit ProfilesData(::google::protobuf::Arena* arena);
  ProfilesData(::google::protobuf::Arena* arena, const ProfilesData& from);
  ProfilesData(::google::protobuf::Arena* arena, ProfilesData&& from) noexcept
      : ProfilesData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResourceProfilesFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
  int resource_profiles_size() const;
  private:
  int _internal_resource_profiles_size() const;

  public:
  void clear_resource_profiles() ;
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* mutable_resource_profiles(int index);
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>* mutable_resource_profiles();

  private:
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>& _internal_resource_profiles() const;
  ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>* _internal_mutable_resource_profiles();
  public:
  const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& resource_profiles(int index) const;
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* add_resource_profiles();
  const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>& resource_profiles() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.profiles.v1development.ProfilesData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opentelemetry::proto::profiles::v1development::ResourceProfiles > resource_profiles_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProfilesData

// repeated .opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
inline int ProfilesData::_internal_resource_profiles_size() const {
  return _internal_resource_profiles().size();
}
inline int ProfilesData::resource_profiles_size() const {
  return _internal_resource_profiles_size();
}
inline void ProfilesData::clear_resource_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ResourceProfiles* ProfilesData::mutable_resource_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _internal_mutable_resource_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>* ProfilesData::mutable_resource_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_profiles();
}
inline const ::opentelemetry::proto::profiles::v1development::ResourceProfiles& ProfilesData::resource_profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _internal_resource_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::ResourceProfiles* ProfilesData::add_resource_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::ResourceProfiles* _add = _internal_mutable_resource_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>& ProfilesData::resource_profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ProfilesData.resource_profiles)
  return _internal_resource_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>&
ProfilesData::_internal_resource_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ResourceProfiles>*
ProfilesData::_internal_mutable_resource_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_profiles_;
}

// -------------------------------------------------------------------

// ResourceProfiles

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceProfiles::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::resource::v1::Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceProfiles::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
  return _internal_resource();
}
inline void ResourceProfiles::unsafe_arena_set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceProfiles::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::resource::v1::Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
  return _msg;
}
inline void ResourceProfiles::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.resource_ = reinterpret_cast<::opentelemetry::proto::resource::v1::Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.resource)
}

// repeated .opentelemetry.proto.profiles.v1development.ScopeProfiles scope_profiles = 2;
inline int ResourceProfiles::_internal_scope_profiles_size() const {
  return _internal_scope_profiles().size();
}
inline int ResourceProfiles::scope_profiles_size() const {
  return _internal_scope_profiles_size();
}
inline void ResourceProfiles::clear_scope_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scope_profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ScopeProfiles* ResourceProfiles::mutable_scope_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _internal_mutable_scope_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>* ResourceProfiles::mutable_scope_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scope_profiles();
}
inline const ::opentelemetry::proto::profiles::v1development::ScopeProfiles& ResourceProfiles::scope_profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _internal_scope_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::ScopeProfiles* ResourceProfiles::add_scope_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::ScopeProfiles* _add = _internal_mutable_scope_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>& ResourceProfiles::scope_profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ResourceProfiles.scope_profiles)
  return _internal_scope_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>&
ResourceProfiles::_internal_scope_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scope_profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ScopeProfiles>*
ResourceProfiles::_internal_mutable_scope_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scope_profiles_;
}

// string schema_url = 3;
inline void ResourceProfiles::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ResourceProfiles::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceProfiles::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}
inline std::string* ResourceProfiles::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return _s;
}
inline const std::string& ResourceProfiles::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ResourceProfiles::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ResourceProfiles::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ResourceProfiles::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ResourceProfiles::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ResourceProfiles.schema_url)
}

// -------------------------------------------------------------------

// ScopeProfiles

// .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
inline bool ScopeProfiles::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::_internal_scope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::common::v1::InstrumentationScope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationScope&>(::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationScope& ScopeProfiles::scope() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
  return _internal_scope();
}
inline void ScopeProfiles::unsafe_arena_set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* released = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::unsafe_arena_release_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::_internal_mutable_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scope_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(GetArena());
    _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(p);
  }
  return _impl_.scope_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationScope* ScopeProfiles::mutable_scope() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::common::v1::InstrumentationScope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
  return _msg;
}
inline void ScopeProfiles::set_allocated_scope(::opentelemetry::proto::common::v1::InstrumentationScope* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scope_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scope_ = reinterpret_cast<::opentelemetry::proto::common::v1::InstrumentationScope*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.scope)
}

// repeated .opentelemetry.proto.profiles.v1development.Profile profiles = 2;
inline int ScopeProfiles::_internal_profiles_size() const {
  return _internal_profiles().size();
}
inline int ScopeProfiles::profiles_size() const {
  return _internal_profiles_size();
}
inline void ScopeProfiles::clear_profiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profiles_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Profile* ScopeProfiles::mutable_profiles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _internal_mutable_profiles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>* ScopeProfiles::mutable_profiles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_profiles();
}
inline const ::opentelemetry::proto::profiles::v1development::Profile& ScopeProfiles::profiles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _internal_profiles().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Profile* ScopeProfiles::add_profiles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Profile* _add = _internal_mutable_profiles()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>& ScopeProfiles::profiles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.ScopeProfiles.profiles)
  return _internal_profiles();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>&
ScopeProfiles::_internal_profiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profiles_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Profile>*
ScopeProfiles::_internal_mutable_profiles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.profiles_;
}

// string schema_url = 3;
inline void ScopeProfiles::clear_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.ClearToEmpty();
}
inline const std::string& ScopeProfiles::schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return _internal_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScopeProfiles::set_schema_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}
inline std::string* ScopeProfiles::mutable_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_schema_url();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return _s;
}
inline const std::string& ScopeProfiles::_internal_schema_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Get();
}
inline void ScopeProfiles::_internal_set_schema_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.Set(value, GetArena());
}
inline std::string* ScopeProfiles::_internal_mutable_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.schema_url_.Mutable( GetArena());
}
inline std::string* ScopeProfiles::release_schema_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
  return _impl_.schema_url_.Release();
}
inline void ScopeProfiles::set_allocated_schema_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schema_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.schema_url_.IsDefault()) {
          _impl_.schema_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.ScopeProfiles.schema_url)
}

// -------------------------------------------------------------------

// Profile

// repeated .opentelemetry.proto.profiles.v1development.ValueType sample_type = 1;
inline int Profile::_internal_sample_type_size() const {
  return _internal_sample_type().size();
}
inline int Profile::sample_type_size() const {
  return _internal_sample_type_size();
}
inline void Profile::clear_sample_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sample_type_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::mutable_sample_type(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _internal_mutable_sample_type()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>* Profile::mutable_sample_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sample_type();
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::sample_type(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _internal_sample_type().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::add_sample_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::ValueType* _add = _internal_mutable_sample_type()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>& Profile::sample_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.sample_type)
  return _internal_sample_type();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>&
Profile::_internal_sample_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sample_type_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::ValueType>*
Profile::_internal_mutable_sample_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sample_type_;
}

// repeated .opentelemetry.proto.profiles.v1development.Sample sample = 2;
inline int Profile::_internal_sample_size() const {
  return _internal_sample().size();
}
inline int Profile::sample_size() const {
  return _internal_sample_size();
}
inline void Profile::clear_sample() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sample_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Sample* Profile::mutable_sample(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _internal_mutable_sample()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>* Profile::mutable_sample()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.sample)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sample();
}
inline const ::opentelemetry::proto::profiles::v1development::Sample& Profile::sample(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _internal_sample().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Sample* Profile::add_sample() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Sample* _add = _internal_mutable_sample()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>& Profile::sample() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.sample)
  return _internal_sample();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>&
Profile::_internal_sample() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sample_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Sample>*
Profile::_internal_mutable_sample() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sample_;
}

// repeated .opentelemetry.proto.profiles.v1development.Mapping mapping_table = 3;
inline int Profile::_internal_mapping_table_size() const {
  return _internal_mapping_table().size();
}
inline int Profile::mapping_table_size() const {
  return _internal_mapping_table_size();
}
inline void Profile::clear_mapping_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapping_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Mapping* Profile::mutable_mapping_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _internal_mutable_mapping_table()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>* Profile::mutable_mapping_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mapping_table();
}
inline const ::opentelemetry::proto::profiles::v1development::Mapping& Profile::mapping_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _internal_mapping_table().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Mapping* Profile::add_mapping_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Mapping* _add = _internal_mutable_mapping_table()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>& Profile::mapping_table() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.mapping_table)
  return _internal_mapping_table();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>&
Profile::_internal_mapping_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapping_table_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Mapping>*
Profile::_internal_mutable_mapping_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mapping_table_;
}

// repeated .opentelemetry.proto.profiles.v1development.Location location_table = 4;
inline int Profile::_internal_location_table_size() const {
  return _internal_location_table().size();
}
inline int Profile::location_table_size() const {
  return _internal_location_table_size();
}
inline void Profile::clear_location_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Location* Profile::mutable_location_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _internal_mutable_location_table()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>* Profile::mutable_location_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.location_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_location_table();
}
inline const ::opentelemetry::proto::profiles::v1development::Location& Profile::location_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _internal_location_table().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Location* Profile::add_location_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Location* _add = _internal_mutable_location_table()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>& Profile::location_table() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.location_table)
  return _internal_location_table();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>&
Profile::_internal_location_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_table_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Location>*
Profile::_internal_mutable_location_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.location_table_;
}

// repeated int32 location_indices = 5;
inline int Profile::_internal_location_indices_size() const {
  return _internal_location_indices().size();
}
inline int Profile::location_indices_size() const {
  return _internal_location_indices_size();
}
inline void Profile::clear_location_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_indices_.Clear();
}
inline ::int32_t Profile::location_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  return _internal_location_indices().Get(index);
}
inline void Profile::set_location_indices(int index, ::int32_t value) {
  _internal_mutable_location_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.location_indices)
}
inline void Profile::add_location_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_location_indices()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.location_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Profile::location_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  return _internal_location_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Profile::mutable_location_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.location_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_location_indices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Profile::_internal_location_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Profile::_internal_mutable_location_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.location_indices_;
}

// repeated .opentelemetry.proto.profiles.v1development.Function function_table = 6;
inline int Profile::_internal_function_table_size() const {
  return _internal_function_table().size();
}
inline int Profile::function_table_size() const {
  return _internal_function_table_size();
}
inline void Profile::clear_function_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Function* Profile::mutable_function_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _internal_mutable_function_table()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>* Profile::mutable_function_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.function_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_function_table();
}
inline const ::opentelemetry::proto::profiles::v1development::Function& Profile::function_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _internal_function_table().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Function* Profile::add_function_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Function* _add = _internal_mutable_function_table()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>& Profile::function_table() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.function_table)
  return _internal_function_table();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>&
Profile::_internal_function_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_table_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Function>*
Profile::_internal_mutable_function_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.function_table_;
}

// repeated .opentelemetry.proto.common.v1.KeyValue attribute_table = 7;
inline int Profile::_internal_attribute_table_size() const {
  return _internal_attribute_table().size();
}
inline int Profile::attribute_table_size() const {
  return _internal_attribute_table_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::mutable_attribute_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _internal_mutable_attribute_table()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* Profile::mutable_attribute_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attribute_table();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Profile::attribute_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _internal_attribute_table().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::add_attribute_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attribute_table()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& Profile::attribute_table() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attribute_table)
  return _internal_attribute_table();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Profile::_internal_attribute_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_table_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Profile::_internal_mutable_attribute_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attribute_table_;
}

// repeated .opentelemetry.proto.profiles.v1development.AttributeUnit attribute_units = 8;
inline int Profile::_internal_attribute_units_size() const {
  return _internal_attribute_units().size();
}
inline int Profile::attribute_units_size() const {
  return _internal_attribute_units_size();
}
inline void Profile::clear_attribute_units() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_units_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::AttributeUnit* Profile::mutable_attribute_units(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _internal_mutable_attribute_units()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>* Profile::mutable_attribute_units()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attribute_units();
}
inline const ::opentelemetry::proto::profiles::v1development::AttributeUnit& Profile::attribute_units(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _internal_attribute_units().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::AttributeUnit* Profile::add_attribute_units() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::AttributeUnit* _add = _internal_mutable_attribute_units()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>& Profile::attribute_units() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attribute_units)
  return _internal_attribute_units();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>&
Profile::_internal_attribute_units() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_units_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::AttributeUnit>*
Profile::_internal_mutable_attribute_units() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attribute_units_;
}

// repeated .opentelemetry.proto.profiles.v1development.Link link_table = 9;
inline int Profile::_internal_link_table_size() const {
  return _internal_link_table().size();
}
inline int Profile::link_table_size() const {
  return _internal_link_table_size();
}
inline void Profile::clear_link_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.link_table_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Link* Profile::mutable_link_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _internal_mutable_link_table()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>* Profile::mutable_link_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.link_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_link_table();
}
inline const ::opentelemetry::proto::profiles::v1development::Link& Profile::link_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _internal_link_table().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Link* Profile::add_link_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Link* _add = _internal_mutable_link_table()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>& Profile::link_table() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.link_table)
  return _internal_link_table();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>&
Profile::_internal_link_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.link_table_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Link>*
Profile::_internal_mutable_link_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.link_table_;
}

// repeated string string_table = 10;
inline int Profile::_internal_string_table_size() const {
  return _internal_string_table().size();
}
inline int Profile::string_table_size() const {
  return _internal_string_table_size();
}
inline void Profile::clear_string_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_table_.Clear();
}
inline std::string* Profile::add_string_table()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_string_table()->Add();
  // @@protoc_insertion_point(field_add_mutable:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _s;
}
inline const std::string& Profile::string_table(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _internal_string_table().Get(index);
}
inline std::string* Profile::mutable_string_table(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _internal_mutable_string_table()->Mutable(index);
}
inline void Profile::set_string_table(int index, const std::string& value) {
  _internal_mutable_string_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::set_string_table(int index, std::string&& value) {
  _internal_mutable_string_table()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::set_string_table(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_string_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::set_string_table(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_string_table()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::set_string_table(int index, absl::string_view value) {
  _internal_mutable_string_table()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_table()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_table()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline void Profile::add_string_table(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_table()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:opentelemetry.proto.profiles.v1development.Profile.string_table)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Profile::string_table() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.string_table)
  return _internal_string_table();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Profile::mutable_string_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.string_table)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_string_table();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Profile::_internal_string_table() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_table_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Profile::_internal_mutable_string_table() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.string_table_;
}

// int64 time_nanos = 11;
inline void Profile::clear_time_nanos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_nanos_ = ::int64_t{0};
}
inline ::int64_t Profile::time_nanos() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.time_nanos)
  return _internal_time_nanos();
}
inline void Profile::set_time_nanos(::int64_t value) {
  _internal_set_time_nanos(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.time_nanos)
}
inline ::int64_t Profile::_internal_time_nanos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_nanos_;
}
inline void Profile::_internal_set_time_nanos(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_nanos_ = value;
}

// int64 duration_nanos = 12;
inline void Profile::clear_duration_nanos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_nanos_ = ::int64_t{0};
}
inline ::int64_t Profile::duration_nanos() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.duration_nanos)
  return _internal_duration_nanos();
}
inline void Profile::set_duration_nanos(::int64_t value) {
  _internal_set_duration_nanos(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.duration_nanos)
}
inline ::int64_t Profile::_internal_duration_nanos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_nanos_;
}
inline void Profile::_internal_set_duration_nanos(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_nanos_ = value;
}

// .opentelemetry.proto.profiles.v1development.ValueType period_type = 13;
inline bool Profile::has_period_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.period_type_ != nullptr);
  return value;
}
inline void Profile::clear_period_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.period_type_ != nullptr) _impl_.period_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::_internal_period_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opentelemetry::proto::profiles::v1development::ValueType* p = _impl_.period_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::profiles::v1development::ValueType&>(::opentelemetry::proto::profiles::v1development::_ValueType_default_instance_);
}
inline const ::opentelemetry::proto::profiles::v1development::ValueType& Profile::period_type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.period_type)
  return _internal_period_type();
}
inline void Profile::unsafe_arena_set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.period_type_);
  }
  _impl_.period_type_ = reinterpret_cast<::opentelemetry::proto::profiles::v1development::ValueType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.profiles.v1development.Profile.period_type)
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::release_period_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::profiles::v1development::ValueType* released = _impl_.period_type_;
  _impl_.period_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::unsafe_arena_release_period_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.period_type)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opentelemetry::proto::profiles::v1development::ValueType* temp = _impl_.period_type_;
  _impl_.period_type_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::_internal_mutable_period_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.period_type_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::opentelemetry::proto::profiles::v1development::ValueType>(GetArena());
    _impl_.period_type_ = reinterpret_cast<::opentelemetry::proto::profiles::v1development::ValueType*>(p);
  }
  return _impl_.period_type_;
}
inline ::opentelemetry::proto::profiles::v1development::ValueType* Profile::mutable_period_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::opentelemetry::proto::profiles::v1development::ValueType* _msg = _internal_mutable_period_type();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.period_type)
  return _msg;
}
inline void Profile::set_allocated_period_type(::opentelemetry::proto::profiles::v1development::ValueType* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.period_type_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.period_type_ = reinterpret_cast<::opentelemetry::proto::profiles::v1development::ValueType*>(value);
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.period_type)
}

// int64 period = 14;
inline void Profile::clear_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_ = ::int64_t{0};
}
inline ::int64_t Profile::period() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.period)
  return _internal_period();
}
inline void Profile::set_period(::int64_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.period)
}
inline ::int64_t Profile::_internal_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.period_;
}
inline void Profile::_internal_set_period(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_ = value;
}

// repeated int32 comment_strindices = 15;
inline int Profile::_internal_comment_strindices_size() const {
  return _internal_comment_strindices().size();
}
inline int Profile::comment_strindices_size() const {
  return _internal_comment_strindices_size();
}
inline void Profile::clear_comment_strindices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.comment_strindices_.Clear();
}
inline ::int32_t Profile::comment_strindices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  return _internal_comment_strindices().Get(index);
}
inline void Profile::set_comment_strindices(int index, ::int32_t value) {
  _internal_mutable_comment_strindices()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
}
inline void Profile::add_comment_strindices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_comment_strindices()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Profile::comment_strindices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  return _internal_comment_strindices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Profile::mutable_comment_strindices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.comment_strindices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_comment_strindices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Profile::_internal_comment_strindices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.comment_strindices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Profile::_internal_mutable_comment_strindices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.comment_strindices_;
}

// int32 default_sample_type_strindex = 16;
inline void Profile::clear_default_sample_type_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_sample_type_strindex_ = 0;
}
inline ::int32_t Profile::default_sample_type_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.default_sample_type_strindex)
  return _internal_default_sample_type_strindex();
}
inline void Profile::set_default_sample_type_strindex(::int32_t value) {
  _internal_set_default_sample_type_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.default_sample_type_strindex)
}
inline ::int32_t Profile::_internal_default_sample_type_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default_sample_type_strindex_;
}
inline void Profile::_internal_set_default_sample_type_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_sample_type_strindex_ = value;
}

// bytes profile_id = 17;
inline void Profile::clear_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.ClearToEmpty();
}
inline const std::string& Profile::profile_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return _internal_profile_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Profile::set_profile_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}
inline std::string* Profile::mutable_profile_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_profile_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return _s;
}
inline const std::string& Profile::_internal_profile_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.profile_id_.Get();
}
inline void Profile::_internal_set_profile_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.Set(value, GetArena());
}
inline std::string* Profile::_internal_mutable_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.profile_id_.Mutable( GetArena());
}
inline std::string* Profile::release_profile_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.profile_id)
  return _impl_.profile_id_.Release();
}
inline void Profile::set_allocated_profile_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.profile_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profile_id_.IsDefault()) {
          _impl_.profile_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.profile_id)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 18;
inline int Profile::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int Profile::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>* Profile::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Profile.attributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attributes();
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Profile::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.attributes)
  return _internal_attributes().Get(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Profile::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::common::v1::KeyValue* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Profile.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>& Profile::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Profile.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>&
Profile::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::common::v1::KeyValue>*
Profile::_internal_mutable_attributes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attributes_;
}

// uint32 dropped_attributes_count = 19;
inline void Profile::clear_dropped_attributes_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = 0u;
}
inline ::uint32_t Profile::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Profile::set_dropped_attributes_count(::uint32_t value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.dropped_attributes_count)
}
inline ::uint32_t Profile::_internal_dropped_attributes_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dropped_attributes_count_;
}
inline void Profile::_internal_set_dropped_attributes_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropped_attributes_count_ = value;
}

// string original_payload_format = 20;
inline void Profile::clear_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.ClearToEmpty();
}
inline const std::string& Profile::original_payload_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return _internal_original_payload_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Profile::set_original_payload_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}
inline std::string* Profile::mutable_original_payload_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_payload_format();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return _s;
}
inline const std::string& Profile::_internal_original_payload_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.original_payload_format_.Get();
}
inline void Profile::_internal_set_original_payload_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.Set(value, GetArena());
}
inline std::string* Profile::_internal_mutable_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.original_payload_format_.Mutable( GetArena());
}
inline std::string* Profile::release_original_payload_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
  return _impl_.original_payload_format_.Release();
}
inline void Profile::set_allocated_original_payload_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.original_payload_format_.IsDefault()) {
          _impl_.original_payload_format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload_format)
}

// bytes original_payload = 21;
inline void Profile::clear_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.ClearToEmpty();
}
inline const std::string& Profile::original_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return _internal_original_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Profile::set_original_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}
inline std::string* Profile::mutable_original_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_payload();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return _s;
}
inline const std::string& Profile::_internal_original_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.original_payload_.Get();
}
inline void Profile::_internal_set_original_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.Set(value, GetArena());
}
inline std::string* Profile::_internal_mutable_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.original_payload_.Mutable( GetArena());
}
inline std::string* Profile::release_original_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Profile.original_payload)
  return _impl_.original_payload_.Release();
}
inline void Profile::set_allocated_original_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.original_payload_.IsDefault()) {
          _impl_.original_payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Profile.original_payload)
}

// -------------------------------------------------------------------

// AttributeUnit

// int32 attribute_key_strindex = 1;
inline void AttributeUnit::clear_attribute_key_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_key_strindex_ = 0;
}
inline ::int32_t AttributeUnit::attribute_key_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.AttributeUnit.attribute_key_strindex)
  return _internal_attribute_key_strindex();
}
inline void AttributeUnit::set_attribute_key_strindex(::int32_t value) {
  _internal_set_attribute_key_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.AttributeUnit.attribute_key_strindex)
}
inline ::int32_t AttributeUnit::_internal_attribute_key_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_key_strindex_;
}
inline void AttributeUnit::_internal_set_attribute_key_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_key_strindex_ = value;
}

// int32 unit_strindex = 2;
inline void AttributeUnit::clear_unit_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_strindex_ = 0;
}
inline ::int32_t AttributeUnit::unit_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.AttributeUnit.unit_strindex)
  return _internal_unit_strindex();
}
inline void AttributeUnit::set_unit_strindex(::int32_t value) {
  _internal_set_unit_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.AttributeUnit.unit_strindex)
}
inline ::int32_t AttributeUnit::_internal_unit_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_strindex_;
}
inline void AttributeUnit::_internal_set_unit_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_strindex_ = value;
}

// -------------------------------------------------------------------

// Link

// bytes trace_id = 1;
inline void Link::clear_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& Link::trace_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Link::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Link.trace_id)
}
inline std::string* Link::mutable_trace_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return _s;
}
inline const std::string& Link::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Get();
}
inline void Link::_internal_set_trace_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.Set(value, GetArena());
}
inline std::string* Link::_internal_mutable_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Mutable( GetArena());
}
inline std::string* Link::release_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Link.trace_id)
  return _impl_.trace_id_.Release();
}
inline void Link::set_allocated_trace_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Link.trace_id)
}

// bytes span_id = 2;
inline void Link::clear_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.ClearToEmpty();
}
inline const std::string& Link::span_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Link.span_id)
  return _internal_span_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Link::set_span_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Link.span_id)
}
inline std::string* Link::mutable_span_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_span_id();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Link.span_id)
  return _s;
}
inline const std::string& Link::_internal_span_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Get();
}
inline void Link::_internal_set_span_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.Set(value, GetArena());
}
inline std::string* Link::_internal_mutable_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.span_id_.Mutable( GetArena());
}
inline std::string* Link::release_span_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opentelemetry.proto.profiles.v1development.Link.span_id)
  return _impl_.span_id_.Release();
}
inline void Link::set_allocated_span_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.span_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.span_id_.IsDefault()) {
          _impl_.span_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.profiles.v1development.Link.span_id)
}

// -------------------------------------------------------------------

// ValueType

// int32 type_strindex = 1;
inline void ValueType::clear_type_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_strindex_ = 0;
}
inline ::int32_t ValueType::type_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.type_strindex)
  return _internal_type_strindex();
}
inline void ValueType::set_type_strindex(::int32_t value) {
  _internal_set_type_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.type_strindex)
}
inline ::int32_t ValueType::_internal_type_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_strindex_;
}
inline void ValueType::_internal_set_type_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_strindex_ = value;
}

// int32 unit_strindex = 2;
inline void ValueType::clear_unit_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_strindex_ = 0;
}
inline ::int32_t ValueType::unit_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.unit_strindex)
  return _internal_unit_strindex();
}
inline void ValueType::set_unit_strindex(::int32_t value) {
  _internal_set_unit_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.unit_strindex)
}
inline ::int32_t ValueType::_internal_unit_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_strindex_;
}
inline void ValueType::_internal_set_unit_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_strindex_ = value;
}

// .opentelemetry.proto.profiles.v1development.AggregationTemporality aggregation_temporality = 3;
inline void ValueType::clear_aggregation_temporality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::profiles::v1development::AggregationTemporality ValueType::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.ValueType.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void ValueType::set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.ValueType.aggregation_temporality)
}
inline ::opentelemetry::proto::profiles::v1development::AggregationTemporality ValueType::_internal_aggregation_temporality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opentelemetry::proto::profiles::v1development::AggregationTemporality>(_impl_.aggregation_temporality_);
}
inline void ValueType::_internal_set_aggregation_temporality(::opentelemetry::proto::profiles::v1development::AggregationTemporality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aggregation_temporality_ = value;
}

// -------------------------------------------------------------------

// Sample

// int32 locations_start_index = 1;
inline void Sample::clear_locations_start_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locations_start_index_ = 0;
}
inline ::int32_t Sample::locations_start_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.locations_start_index)
  return _internal_locations_start_index();
}
inline void Sample::set_locations_start_index(::int32_t value) {
  _internal_set_locations_start_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.locations_start_index)
}
inline ::int32_t Sample::_internal_locations_start_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locations_start_index_;
}
inline void Sample::_internal_set_locations_start_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locations_start_index_ = value;
}

// int32 locations_length = 2;
inline void Sample::clear_locations_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locations_length_ = 0;
}
inline ::int32_t Sample::locations_length() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.locations_length)
  return _internal_locations_length();
}
inline void Sample::set_locations_length(::int32_t value) {
  _internal_set_locations_length(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.locations_length)
}
inline ::int32_t Sample::_internal_locations_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.locations_length_;
}
inline void Sample::_internal_set_locations_length(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.locations_length_ = value;
}

// repeated int64 value = 3;
inline int Sample::_internal_value_size() const {
  return _internal_value().size();
}
inline int Sample::value_size() const {
  return _internal_value_size();
}
inline void Sample::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.Clear();
}
inline ::int64_t Sample::value(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.value)
  return _internal_value().Get(index);
}
inline void Sample::set_value(int index, ::int64_t value) {
  _internal_mutable_value()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.value)
}
inline void Sample::add_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_value()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.value)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Sample::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.value)
  return _internal_value();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Sample::mutable_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_value();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Sample::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Sample::_internal_mutable_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.value_;
}

// repeated int32 attribute_indices = 4;
inline int Sample::_internal_attribute_indices_size() const {
  return _internal_attribute_indices().size();
}
inline int Sample::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Sample::clear_attribute_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_indices_.Clear();
}
inline ::int32_t Sample::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  return _internal_attribute_indices().Get(index);
}
inline void Sample::set_attribute_indices(int index, ::int32_t value) {
  _internal_mutable_attribute_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
}
inline void Sample::add_attribute_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_attribute_indices()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Sample::attribute_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  return _internal_attribute_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Sample::mutable_attribute_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.attribute_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attribute_indices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Sample::_internal_attribute_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Sample::_internal_mutable_attribute_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attribute_indices_;
}

// optional int32 link_index = 5;
inline bool Sample::has_link_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Sample::clear_link_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.link_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Sample::link_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.link_index)
  return _internal_link_index();
}
inline void Sample::set_link_index(::int32_t value) {
  _internal_set_link_index(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.link_index)
}
inline ::int32_t Sample::_internal_link_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.link_index_;
}
inline void Sample::_internal_set_link_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.link_index_ = value;
}

// repeated uint64 timestamps_unix_nano = 6;
inline int Sample::_internal_timestamps_unix_nano_size() const {
  return _internal_timestamps_unix_nano().size();
}
inline int Sample::timestamps_unix_nano_size() const {
  return _internal_timestamps_unix_nano_size();
}
inline void Sample::clear_timestamps_unix_nano() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamps_unix_nano_.Clear();
}
inline ::uint64_t Sample::timestamps_unix_nano(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  return _internal_timestamps_unix_nano().Get(index);
}
inline void Sample::set_timestamps_unix_nano(int index, ::uint64_t value) {
  _internal_mutable_timestamps_unix_nano()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
}
inline void Sample::add_timestamps_unix_nano(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_timestamps_unix_nano()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& Sample::timestamps_unix_nano() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  return _internal_timestamps_unix_nano();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Sample::mutable_timestamps_unix_nano()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Sample.timestamps_unix_nano)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_timestamps_unix_nano();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
Sample::_internal_timestamps_unix_nano() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamps_unix_nano_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Sample::_internal_mutable_timestamps_unix_nano() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.timestamps_unix_nano_;
}

// -------------------------------------------------------------------

// Label

// int32 key_strindex = 1;
inline void Label::clear_key_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_strindex_ = 0;
}
inline ::int32_t Label::key_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Label.key_strindex)
  return _internal_key_strindex();
}
inline void Label::set_key_strindex(::int32_t value) {
  _internal_set_key_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Label.key_strindex)
}
inline ::int32_t Label::_internal_key_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_strindex_;
}
inline void Label::_internal_set_key_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_strindex_ = value;
}

// int32 str_strindex = 2;
inline void Label::clear_str_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.str_strindex_ = 0;
}
inline ::int32_t Label::str_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Label.str_strindex)
  return _internal_str_strindex();
}
inline void Label::set_str_strindex(::int32_t value) {
  _internal_set_str_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Label.str_strindex)
}
inline ::int32_t Label::_internal_str_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.str_strindex_;
}
inline void Label::_internal_set_str_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.str_strindex_ = value;
}

// int64 num = 3;
inline void Label::clear_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_ = ::int64_t{0};
}
inline ::int64_t Label::num() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Label.num)
  return _internal_num();
}
inline void Label::set_num(::int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Label.num)
}
inline ::int64_t Label::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void Label::_internal_set_num(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_ = value;
}

// int32 num_unit_strindex = 4;
inline void Label::clear_num_unit_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_unit_strindex_ = 0;
}
inline ::int32_t Label::num_unit_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Label.num_unit_strindex)
  return _internal_num_unit_strindex();
}
inline void Label::set_num_unit_strindex(::int32_t value) {
  _internal_set_num_unit_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Label.num_unit_strindex)
}
inline ::int32_t Label::_internal_num_unit_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_unit_strindex_;
}
inline void Label::_internal_set_num_unit_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_unit_strindex_ = value;
}

// -------------------------------------------------------------------

// Mapping

// uint64 memory_start = 1;
inline void Mapping::clear_memory_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memory_start_ = ::uint64_t{0u};
}
inline ::uint64_t Mapping::memory_start() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.memory_start)
  return _internal_memory_start();
}
inline void Mapping::set_memory_start(::uint64_t value) {
  _internal_set_memory_start(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.memory_start)
}
inline ::uint64_t Mapping::_internal_memory_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memory_start_;
}
inline void Mapping::_internal_set_memory_start(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memory_start_ = value;
}

// uint64 memory_limit = 2;
inline void Mapping::clear_memory_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memory_limit_ = ::uint64_t{0u};
}
inline ::uint64_t Mapping::memory_limit() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.memory_limit)
  return _internal_memory_limit();
}
inline void Mapping::set_memory_limit(::uint64_t value) {
  _internal_set_memory_limit(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.memory_limit)
}
inline ::uint64_t Mapping::_internal_memory_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memory_limit_;
}
inline void Mapping::_internal_set_memory_limit(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memory_limit_ = value;
}

// uint64 file_offset = 3;
inline void Mapping::clear_file_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_offset_ = ::uint64_t{0u};
}
inline ::uint64_t Mapping::file_offset() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.file_offset)
  return _internal_file_offset();
}
inline void Mapping::set_file_offset(::uint64_t value) {
  _internal_set_file_offset(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.file_offset)
}
inline ::uint64_t Mapping::_internal_file_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_offset_;
}
inline void Mapping::_internal_set_file_offset(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_offset_ = value;
}

// int32 filename_strindex = 4;
inline void Mapping::clear_filename_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_strindex_ = 0;
}
inline ::int32_t Mapping::filename_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.filename_strindex)
  return _internal_filename_strindex();
}
inline void Mapping::set_filename_strindex(::int32_t value) {
  _internal_set_filename_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.filename_strindex)
}
inline ::int32_t Mapping::_internal_filename_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_strindex_;
}
inline void Mapping::_internal_set_filename_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_strindex_ = value;
}

// repeated int32 attribute_indices = 5;
inline int Mapping::_internal_attribute_indices_size() const {
  return _internal_attribute_indices().size();
}
inline int Mapping::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Mapping::clear_attribute_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_indices_.Clear();
}
inline ::int32_t Mapping::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  return _internal_attribute_indices().Get(index);
}
inline void Mapping::set_attribute_indices(int index, ::int32_t value) {
  _internal_mutable_attribute_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
}
inline void Mapping::add_attribute_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_attribute_indices()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Mapping::attribute_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  return _internal_attribute_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Mapping::mutable_attribute_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Mapping.attribute_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attribute_indices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Mapping::_internal_attribute_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Mapping::_internal_mutable_attribute_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attribute_indices_;
}

// bool has_functions = 6;
inline void Mapping::clear_has_functions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_functions_ = false;
}
inline bool Mapping::has_functions() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_functions)
  return _internal_has_functions();
}
inline void Mapping::set_has_functions(bool value) {
  _internal_set_has_functions(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_functions)
}
inline bool Mapping::_internal_has_functions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_functions_;
}
inline void Mapping::_internal_set_has_functions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_functions_ = value;
}

// bool has_filenames = 7;
inline void Mapping::clear_has_filenames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_filenames_ = false;
}
inline bool Mapping::has_filenames() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_filenames)
  return _internal_has_filenames();
}
inline void Mapping::set_has_filenames(bool value) {
  _internal_set_has_filenames(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_filenames)
}
inline bool Mapping::_internal_has_filenames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_filenames_;
}
inline void Mapping::_internal_set_has_filenames(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_filenames_ = value;
}

// bool has_line_numbers = 8;
inline void Mapping::clear_has_line_numbers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_line_numbers_ = false;
}
inline bool Mapping::has_line_numbers() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_line_numbers)
  return _internal_has_line_numbers();
}
inline void Mapping::set_has_line_numbers(bool value) {
  _internal_set_has_line_numbers(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_line_numbers)
}
inline bool Mapping::_internal_has_line_numbers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_line_numbers_;
}
inline void Mapping::_internal_set_has_line_numbers(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_line_numbers_ = value;
}

// bool has_inline_frames = 9;
inline void Mapping::clear_has_inline_frames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_inline_frames_ = false;
}
inline bool Mapping::has_inline_frames() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Mapping.has_inline_frames)
  return _internal_has_inline_frames();
}
inline void Mapping::set_has_inline_frames(bool value) {
  _internal_set_has_inline_frames(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Mapping.has_inline_frames)
}
inline bool Mapping::_internal_has_inline_frames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_inline_frames_;
}
inline void Mapping::_internal_set_has_inline_frames(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_inline_frames_ = value;
}

// -------------------------------------------------------------------

// Location

// optional int32 mapping_index = 1;
inline bool Location::has_mapping_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Location::clear_mapping_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapping_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Location::mapping_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.mapping_index)
  return _internal_mapping_index();
}
inline void Location::set_mapping_index(::int32_t value) {
  _internal_set_mapping_index(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.mapping_index)
}
inline ::int32_t Location::_internal_mapping_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapping_index_;
}
inline void Location::_internal_set_mapping_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapping_index_ = value;
}

// uint64 address = 2;
inline void Location::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_ = ::uint64_t{0u};
}
inline ::uint64_t Location::address() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.address)
  return _internal_address();
}
inline void Location::set_address(::uint64_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.address)
}
inline ::uint64_t Location::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_;
}
inline void Location::_internal_set_address(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_ = value;
}

// repeated .opentelemetry.proto.profiles.v1development.Line line = 3;
inline int Location::_internal_line_size() const {
  return _internal_line().size();
}
inline int Location::line_size() const {
  return _internal_line_size();
}
inline void Location::clear_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_.Clear();
}
inline ::opentelemetry::proto::profiles::v1development::Line* Location::mutable_line(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.profiles.v1development.Location.line)
  return _internal_mutable_line()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>* Location::mutable_line()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Location.line)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_line();
}
inline const ::opentelemetry::proto::profiles::v1development::Line& Location::line(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.line)
  return _internal_line().Get(index);
}
inline ::opentelemetry::proto::profiles::v1development::Line* Location::add_line() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opentelemetry::proto::profiles::v1development::Line* _add = _internal_mutable_line()->Add();
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Location.line)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>& Location::line() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Location.line)
  return _internal_line();
}
inline const ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>&
Location::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_;
}
inline ::google::protobuf::RepeatedPtrField<::opentelemetry::proto::profiles::v1development::Line>*
Location::_internal_mutable_line() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.line_;
}

// bool is_folded = 4;
inline void Location::clear_is_folded() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_folded_ = false;
}
inline bool Location::is_folded() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.is_folded)
  return _internal_is_folded();
}
inline void Location::set_is_folded(bool value) {
  _internal_set_is_folded(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.is_folded)
}
inline bool Location::_internal_is_folded() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_folded_;
}
inline void Location::_internal_set_is_folded(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_folded_ = value;
}

// repeated int32 attribute_indices = 5;
inline int Location::_internal_attribute_indices_size() const {
  return _internal_attribute_indices().size();
}
inline int Location::attribute_indices_size() const {
  return _internal_attribute_indices_size();
}
inline void Location::clear_attribute_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attribute_indices_.Clear();
}
inline ::int32_t Location::attribute_indices(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  return _internal_attribute_indices().Get(index);
}
inline void Location::set_attribute_indices(int index, ::int32_t value) {
  _internal_mutable_attribute_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
}
inline void Location::add_attribute_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_attribute_indices()->Add(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Location::attribute_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  return _internal_attribute_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Location::mutable_attribute_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.profiles.v1development.Location.attribute_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attribute_indices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Location::_internal_attribute_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attribute_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Location::_internal_mutable_attribute_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attribute_indices_;
}

// -------------------------------------------------------------------

// Line

// int32 function_index = 1;
inline void Line::clear_function_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_index_ = 0;
}
inline ::int32_t Line::function_index() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.function_index)
  return _internal_function_index();
}
inline void Line::set_function_index(::int32_t value) {
  _internal_set_function_index(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.function_index)
}
inline ::int32_t Line::_internal_function_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_index_;
}
inline void Line::_internal_set_function_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_index_ = value;
}

// int64 line = 2;
inline void Line::clear_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = ::int64_t{0};
}
inline ::int64_t Line::line() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.line)
  return _internal_line();
}
inline void Line::set_line(::int64_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.line)
}
inline ::int64_t Line::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_;
}
inline void Line::_internal_set_line(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = value;
}

// int64 column = 3;
inline void Line::clear_column() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.column_ = ::int64_t{0};
}
inline ::int64_t Line::column() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Line.column)
  return _internal_column();
}
inline void Line::set_column(::int64_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Line.column)
}
inline ::int64_t Line::_internal_column() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.column_;
}
inline void Line::_internal_set_column(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.column_ = value;
}

// -------------------------------------------------------------------

// Function

// int32 name_strindex = 1;
inline void Function::clear_name_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_strindex_ = 0;
}
inline ::int32_t Function::name_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.name_strindex)
  return _internal_name_strindex();
}
inline void Function::set_name_strindex(::int32_t value) {
  _internal_set_name_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.name_strindex)
}
inline ::int32_t Function::_internal_name_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_strindex_;
}
inline void Function::_internal_set_name_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_strindex_ = value;
}

// int32 system_name_strindex = 2;
inline void Function::clear_system_name_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.system_name_strindex_ = 0;
}
inline ::int32_t Function::system_name_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.system_name_strindex)
  return _internal_system_name_strindex();
}
inline void Function::set_system_name_strindex(::int32_t value) {
  _internal_set_system_name_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.system_name_strindex)
}
inline ::int32_t Function::_internal_system_name_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_name_strindex_;
}
inline void Function::_internal_set_system_name_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.system_name_strindex_ = value;
}

// int32 filename_strindex = 3;
inline void Function::clear_filename_strindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_strindex_ = 0;
}
inline ::int32_t Function::filename_strindex() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.filename_strindex)
  return _internal_filename_strindex();
}
inline void Function::set_filename_strindex(::int32_t value) {
  _internal_set_filename_strindex(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.filename_strindex)
}
inline ::int32_t Function::_internal_filename_strindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_strindex_;
}
inline void Function::_internal_set_filename_strindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_strindex_ = value;
}

// int64 start_line = 4;
inline void Function::clear_start_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_line_ = ::int64_t{0};
}
inline ::int64_t Function::start_line() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.profiles.v1development.Function.start_line)
  return _internal_start_line();
}
inline void Function::set_start_line(::int64_t value) {
  _internal_set_start_line(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.profiles.v1development.Function.start_line)
}
inline ::int64_t Function::_internal_start_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_line_;
}
inline void Function::_internal_set_start_line(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_line_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1development
}  // namespace profiles
}  // namespace proto
}  // namespace opentelemetry


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::opentelemetry::proto::profiles::v1development::AggregationTemporality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opentelemetry::proto::profiles::v1development::AggregationTemporality>() {
  return ::opentelemetry::proto::profiles::v1development::AggregationTemporality_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fprofiles_2fv1development_2fprofiles_2eproto_2epb_2eh
